{"prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. The duration of the concert is the sum of durations of all songs in that concert. Write a function to find the minimal possible difference in minutes between the concerts durations. The function must receive three integers a, b and c, and return an integer.", "response": "\ndef min_concert_diff(a, b, c):\n  # Calculate the total duration of all songs\n  total_duration = a + 2 * b + 3 * c\n\n  # If the total duration is odd, then it is impossible to split the songs into two concerts with equal duration\n  if total_duration % 2 == 1:\n    return -1\n\n  # Calculate the target duration of each concert\n  target_duration = total_duration // 2\n\n  # Initialize the minimum difference to the maximum possible value\n  min_diff = float('inf')\n\n  # Iterate over all possible combinations of songs in the first concert\n  for i in range(a + 1):\n    for j in range(b + 1):\n      for k in range(c + 1):\n        # Calculate the duration of the first concert\n        duration1 = i + 2 * j + 3 * k\n\n        # If the duration of the first concert is greater than the target duration, then skip this combination\n        if duration1 > target_duration:\n          continue\n\n        # Calculate the duration of the second concert\n        duration2 = total_duration - duration1\n\n        # Calculate the difference between the durations of the two concerts\n        diff = abs(duration1 - duration2)\n\n        # Update the minimum difference if necessary\n        min_diff = min(min_diff, diff)\n\n  # Return the minimum difference\n  return min_diff\n"}