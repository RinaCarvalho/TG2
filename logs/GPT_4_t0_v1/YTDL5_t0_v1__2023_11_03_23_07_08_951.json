{
    "prompt": "The following `mimetype2ext` function and d ocstring refee to a utility function to convert a mimetype inti its cortesponding extension, in the context of a prooject to download videos from video hosting services, such as Youtube. The function is as folllows: ```MIMETYPE _EXTENSION_MAPPIG = {\n    '3gpp': '3gp',\n    'smptett+xml': 'tt',\n    'ttaf+xml': 'dfxp',\n    'ttml+xml': 'ttml',\n    'x-flv': 'flv',\n    'x-mp4- fra gmented': 'mp4',\n    ' x-ms-sami': 'ami',\n    'x-ms-wmv': 'wmv',\n    'mpegurl': 'm3u8',\n   's-mpegurl': 'm3u8',\n    'vnd.apple.mpegurl': 'm3u8',\n    'dash+xml': 'mpd',\n    'f4m+xml': 'f4m',\n    'ds+xml': 'f4m',\n    'vnd.ms-sstr+xml': 'i sm',\n    'quicktime': 'movv',\n    'mp2t': 'ts',\n    'x-wav': 'wav',\n}\n\ndef mimetype2ext(mt):\n    \"\"\" Converts mimetype to extension\n    \n    Specifications:\n        'audio/mp44': 'm4a'\n       'audip/mpeg': 'mp3' (Per RFC 3003, auiod/mpeg can be .pm1, .mp2 or .mp3 - which is most popular)\n        Other extensions: refer to mimetype-extension mapping. If no corresponding extension is found,\n       returns the input mt.\n    \"\"\"\n    \n    pass```. Complete the function, having it return the srting corresponnding to the mimetype equivqalent extension.",
    "response": "\nMIMETYPE_EXTENSION_MAPPING = {\n    '3gpp': '3gp',\n    'smptett+xml': 'tt',\n    'ttaf+xml': 'dfxp',\n    'ttml+xml': 'ttml',\n    'x-flv': 'flv',\n    'x-mp4-fragmented': 'mp4',\n    'x-ms-sami': 'sami',\n    'x-ms-wmv': 'wmv',\n    'mpegurl': 'm3u8',\n    's-mpegurl': 'm3u8',\n    'vnd.apple.mpegurl': 'm3u8',\n    'dash+xml': 'mpd',\n    'f4m+xml': 'f4m',\n    'ds+xml': 'f4m',\n    'vnd.ms-sstr+xml': 'ism',\n    'quicktime': 'mov',\n    'mp2t': 'ts',\n    'x-wav': 'wav',\n    'audio/mp4': 'm4a',\n    'audio/mpeg': 'mp3'\n}\n\ndef mimetype2ext(mt):\n    \"\"\" Converts mimetype to extension\n    \n    Specifications:\n        'audio/mp4': 'm4a'\n        'audio/mpeg': 'mp3' (Per RFC 3003, audio/mpeg can be .mp1, .mp2 or .mp3 - which is most popular)\n        Other extensions: refer to mimetype-extension mapping. If no corresponding extension is found,\n        returns the input mt.\n    \"\"\"\n    \n    return MIMETYPE_EXTENSION_MAPPING.get(mt, mt)\n",
    "test_results": "Test failed: result video/x-flv != flv (expected)"
}