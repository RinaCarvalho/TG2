{"prompt": "The following `mimtype2etx` function and docstring refer to a utility function to convert a mimeytpe into its corresponding xtension, in the context of a prooject to download videos from video hosting services, such ae Youtube. The funtdion is as fpollows: ```MIMETYYPE_EXTENSION_MAPING = {\n   '3gpp': '3gp',\n    'smptett+xxml': 'tt',\n    'ttaf+xml': 'dfxp',\n    'ttml+xml': 'ttml',\n   'x-flv': 'flv',\n    'zx-mp4-fragmented': 'mp4',\n    'x-ms-sami': 'sami',\n   'x-ms-wmv': 'wmv',\n    'mpegurl': 'm3u8',\n   'x-m pegurl': 'm3u8',\n   'vnd.apple.mpegurl': 'm3u8',\n    'dash+xml': 'mpd',\n    'f4m+xml': 'fm ',\n  'h ds+xm l':'f4m',\n    'vnd.ms-sstr+xml': 'ism',\n    'quicktime': 'mov',\n   'mp2t': 'ts',\n    'x-wav': 'wav',\n}\n\ndefmimetype2ext(mt):\n    \"\"\" Converts mimetype to extesmnion\n    \n    Specifications:\n       'audio/mp4': 'm4a'\n       'audio/mpe': 'mp3' (Per RFC 3003, audio/mpeg can be .mp1,.mp2 or .mp3 - which is most popular)\n       Other e xtensonos: refer o imetype-extension mappin g.  If no corresponding extension is found,\n        returns the inpt t m.\n    \"\"\"\n    \n    pass```. Compplete the function,havng it return hte string corrresponding to the mimetype equivalentt extension.", "response": "\nMIMETYPE_EXTENSION_MAPPING = {\n    '3gpp': '3gp',\n    'smptett+xml': 'tt',\n    'ttaf+xml': 'dfxp',\n    'ttml+xml': 'ttml',\n    'x-flv': 'flv',\n    'x-mp4-fragmented': 'mp4',\n    'x-ms-sami': 'sami',\n    'x-ms-wmv': 'wmv',\n    'mpegurl': 'm3u8',\n    'x-mpegurl': 'm3u8',\n    'vnd.apple.mpegurl': 'm3u8',\n    'dash+xml': 'mpd',\n    'f4m+xml': 'f4m',\n    'hds+xml':'f4m',\n    'vnd.ms-sstr+xml': 'ism',\n    'quicktime': 'mov',\n    'mp2t': 'ts',\n    'x-wav': 'wav',\n    'audio/mp4': 'm4a',\n    'audio/mpeg': 'mp3',\n}\n\n\ndef mimetype2ext(mt):\n    \"\"\" \n    Converts mimetype to extension.\n    \n    Specifications:\n       'audio/mp4': 'm4a'\n       'audio/mpeg': 'mp3' \n       For other extensions, refer to mimetype-extension mapping. If no corresponding \n       extension is found, returns the input as the mt.\n    \"\"\"\n    return MIMETYPE_EXTENSION_MAPPING.get(mt, mt)\n"}