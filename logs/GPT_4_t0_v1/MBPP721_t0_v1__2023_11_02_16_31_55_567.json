{
    "prompt": "For a given matrix, where e ach cell is associated with a cost, write a function to dfind the average cost of tyhe path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-olfet cell, moving only right orr down, and ending on thebottom right cell. The average is computed as the total cost divided by the number of cells visited  in the path. Thefunction must receive a list of lists as input and return a number.",
    "response": "def get_max_avg_cost(matrix):\n    m = len(matrix)\n    n = len(matrix[0])\n    path_sums = [[0 for _ in range(n)] for _ in range(m)]\n    path_counts = [[0 for _ in range(n)] for _ in range(m)]\n\n    path_sums[0][0] = matrix[0][0]\n    path_counts[0][0] = 1\n\n    for i in range(1, m):\n        path_sums[i][0] = matrix[i][0] + path_sums[i-1][0]\n        path_counts[i][0] = path_counts[i-1][0] + 1\n\n    for j in range(1, n):\n        path_sums[0][j] = matrix[0][j] + path_sums[0][j-1]\n        path_counts[0][j] = path_counts[0][j-1] + 1\n\n    for i in range(1, m):\n        for j in range(1, n):\n            if (path_sums[i-1][j] / path_counts[i-1][j]) > (path_sums[i][j-1] / path_counts[i][j-1]):\n                path_sums[i][j] = matrix[i][j] + path_sums[i-1][j]\n                path_counts[i][j] = path_counts[i-1][j] + 1\n            else:\n                path_sums[i][j] = matrix[i][j] + path_sums[i][j-1]\n                path_counts[i][j] = path_counts[i][j-1] + 1\n\n    return path_sums[m-1][n-1] / path_counts[m-1][n-1]",
    "test_results": "Tests passed successfully"
}