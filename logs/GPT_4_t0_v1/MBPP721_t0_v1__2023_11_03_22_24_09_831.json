{"prompt": "For a given matrix, shere each cell is associateccd with a cost, wriite a function to find the avefage cost of thhe patjh with the maximum average oover all exjisting paths. A path is definwed as a sequence of cels thaat starts from the top-left cell, moving  only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in thhe path. The funcion must receive a list of lists as input and return a number.", "response": "\ndef max_average_path(matrix):\n    rows, cols = len(matrix), len(matrix[0])\n    sum_matrix = [[0 for _ in range(cols)] for _ in range(rows)]\n    count_matrix = [[0 for _ in range(cols)] for _ in range(rows)]\n    \n    sum_matrix[0][0] = matrix[0][0]\n    count_matrix[0][0] = 1\n    \n    for i in range(1, rows):\n        sum_matrix[i][0] = sum_matrix[i-1][0] + matrix[i][0]\n        count_matrix[i][0] = count_matrix[i-1][0] + 1\n    \n    for j in range(1, cols):\n        sum_matrix[0][j] = sum_matrix[0][j-1] + matrix[0][j]\n        count_matrix[0][j] = count_matrix[0][j-1] + 1\n    \n    for i in range(1, rows):\n        for j in range(1, cols):\n            if sum_matrix[i-1][j] / count_matrix[i-1][j] > sum_matrix[i][j-1] / count_matrix[i][j-1]:\n                sum_matrix[i][j] = sum_matrix[i-1][j] + matrix[i][j]\n                count_matrix[i][j] = count_matrix[i-1][j] + 1 \n            else:\n                sum_matrix[i][j] = sum_matrix[i][j-1] + matrix[i][j]\n                count_matrix[i][j] = count_matrix[i][j-1] + 1 \n    \n    return sum_matrix[-1][-1] / count_matrix[-1][-1]\n"}