{
    "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. The duration of the concert is the sum of durations of all songs in that concert. Write a function to find the minimal possible difference in minutes between the concerts durations. The function must receive three integers a, b and c, and return an integer.\n\nExamples:\n\nInput: ['1', '1', '1']\nOutput: 0\n\nInput: ['2', '1', '3']\nOutput: 1",
    "response": "def min_concerts_difference(a, b, c):\n    # Total duration of all songs\n    total_duration = a + b + c\n    \n    # Calculating the half duration of all songs rounded up\n    half_duration = (total_duration + 1) // 2\n    \n    # Generating all possible sums of durations for the first concert\n    possible_sums = set()\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                duration = i + 2*j + 3*k\n                possible_sums.add(duration)\n\n    # Finding the closest sum to the half duration\n    closest_sum = min(possible_sums, key=lambda x: abs(x - half_duration))\n    \n    # Calculating the difference between the closest sum and the total duration\n    difference = abs(2 * closest_sum - total_duration)\n    \n    return difference",
    "test_results": "Test failed: result 1 != 0 (expected)"
}