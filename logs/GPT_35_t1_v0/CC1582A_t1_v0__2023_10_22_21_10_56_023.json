{"prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. The duration of the concert is the sum of durations of all songs in that concert. Write a function to find the minimal possible difference in minutes between the concerts durations. The function must receive three integers a, b and c, and return an integer.\n\nExamples:\n\nInput: ['1', '1', '1']\nOutput: 0\n\nInput: ['2', '1', '3']\nOutput: 1", "response": "def min_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Calculate half of the total duration\n    half_duration = total_duration // 2\n    \n    # Create a dynamic programming array to store the possible durations\n    dp = [[False] * (half_duration + 1) for _ in range(total_duration + 1)]\n    \n    # Set the first column of the dp array to True\n    for i in range(total_duration + 1):\n        dp[i][0] = True\n    \n    # Calculate the possible durations\n    for i in range(1, total_duration + 1):\n        for j in range(1, half_duration + 1):\n            if i <= a and dp[i-1][j-1]:\n                dp[i][j] = True\n            elif i <= 2*b and dp[i-2][j-1]:\n                dp[i][j] = True\n            elif i <= 3*c and dp[i-3][j-1]:\n                dp[i][j] = True\n    \n    # Find the minimum possible difference in minutes\n    min_diff = float('inf')\n    for j in range(half_duration, -1, -1):\n        if dp[total_duration][j]:\n            min_diff = total_duration - 2*j\n            break\n    \n    return min_diff"}