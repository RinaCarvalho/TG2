{
    "prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.\n\nExamples:\n\nInput: [[1, 2, 3], [6, 5, 4], [7, 3, 9]]\nOutput: 5.2\n\nInput: [[2, 3, 4], [7, 6, 5], [8, 4, 10]]\nOutput: 6.2",
    "response": "def max_average_path(matrix):\n    row_count = len(matrix)\n    col_count = len(matrix[0])\n\n    # Create a matrix to store the maximum average for each cell\n    max_avg_matrix = [[0] * col_count for _ in range(row_count)]\n\n    for i in range(row_count):\n        for j in range(col_count):\n            # Calculate the maximum average for the current cell\n            if i == 0 and j == 0:\n                max_avg_matrix[i][j] = matrix[i][j]\n            elif i == 0:\n                max_avg_matrix[i][j] = (matrix[i][j] + max_avg_matrix[i][j-1] * j) / (j + 1)\n            elif j == 0:\n                max_avg_matrix[i][j] = (matrix[i][j] + max_avg_matrix[i-1][j] * i) / (i + 1)\n            else:\n                max_avg_matrix[i][j] = max((matrix[i][j] + max_avg_matrix[i][j-1] * j) / (j + 1),\n                                           (matrix[i][j] + max_avg_matrix[i-1][j] * i) / (i + 1))\n\n    # Return the maximum average of the bottom-right cell\n    return max_avg_matrix[row_count-1][col_count-1]",
    "test_results": "Test failed: result 5.777777777777779 != 5.2 (expected)"
}