{"prompt": "Let c_1, c_2, \u2026, c_n be a permutation of integers 1, 2, \u2026, n. Consider all subsegments of this permutation containing an integer x. Given an integer m, we call the integer x good if there are exactly m different values of maximum on these subsegments. A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array). A sequence a is a subsegment of a sequence b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. Given four integers n, m, k and p, write a function to count the number of permutations of length n with exactly k good numbers, modulo p. The function must receive four integers n, m, k and p and return an integer.\n\nExamples:\n\nInput: 4 3 2 10007\nOutput: 4\n\nInput: 6 4 1 769626776\nOutput: 472\n\nInput: 66 11 9 786747482\nOutput: 206331312\n\nInput: 99 30 18 650457567\nOutput: 77365367", "response": "\ndef perm_count(n, m, k, p):\n    fact, ifact = [0]*(n+2), [0]*(n+2)\n    fact[0] = ifact[0] = 1\n    for i in range(1,n+2):\n        fact[i] = fact[i-1]*i % p\n    ifact[n+1] = pow(fact[n+1], p-2, p)\n    for i in reversed(range(1,n+2)):\n        ifact[i-1] = ifact[i]*i%p\n\n    B = [[0]*(m+1) for _ in range(n+2)]\n    f = [[0]*(k+1) for _ in range(n+1)]\n    B[0][0] = 1\n    f[0][0] = 1\n    C = [pow(i,n-i,p) for i in range(n+2)]\n\n    for nn in range(1,n+2):\n        for x in range(m+1):\n            B[nn][x] = (B[nn-1][x] + B[nn-1][x-1]*(nn-1)%p)%p\n\n    for nn in range(1,n+1):\n        for x in range(min(nn, k)+1):\n            for l in range(min(x, nn-m)+1):\n                y = x - l\n                # consider max number N\n                # firstly separate N and m-1 numbers , their permutation num is C(m-1, l)\n                # secondly select other numbers to create permutation\n                # as N will separate them , so their permutation num is C(nn-l-1, y) * (nn-l-1)!\n                # so the finally permutation num is C(m-1, l) * C(nn-l-1, y) * (nn-l-1)!\n                # as we set f[i][j] , it presents there are j good numbers and permutation number B(i, j)\n                f[nn][x] = (f[nn][x] + f[nn-l-1][y]*B[m-1][l]%p*B[n-m-l+1][y]%p*fact[nn-l-1]%p)%p\n\n    return f[n][k]*fact[n]%p\n"}