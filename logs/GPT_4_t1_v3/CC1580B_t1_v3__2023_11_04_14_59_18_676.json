{"prompt": "Let c_1, c_2, \u2026, c_n be a permutation of integers 1, 2, \u2026, n. Consider all subsegments of this permutation containing an integer x. Given an integer m, we call the integer x good if there are exactly m different values of maximum on these subsegments. A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array). A sequence a is a subsegment of a sequence b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. Given four integers n, m, k and p, write a function to count the number of permutations of length n with exactly k good numbers, modulo p. The function must receive four integers n, m, k and p and return an integer.\n\nExamples:\n\nInput: 4 3 2 10007\nOutput: 4\n\nInput: 6 4 1 769626776\nOutput: 472\n\nInput: 66 11 9 786747482\nOutput: 206331312\n\nInput: 99 30 18 650457567\nOutput: 77365367", "response": "\ndef permutations(n, m, k, p):\n    f = [[0] * 305 for _ in range(305)]\n    s = [[0] * 305 for _ in range(305)]\n    g = [[0] * 305 for _ in range(305)]\n    p2 = [0] * 305\n    c = [[0] * 305 for _ in range(305)]\n    \n    for i in range(1, n+1):\n        c[i][0] = c[i][i] = 1\n        for j in range(1, i):\n            c[i][j] = (c[i-1][j-1] + c[i-1][j]) % p\n    \n    p2[0] = 1\n    for i in range(1, n+1):\n        p2[i] = (p2[i-1] * 2) % p\n\n    for i in range(m):\n        f[i][0] = 1\n\n    for i in range(m, n+1):\n        for j in range(m-1, -1, -1):\n            f[i][j] = (f[i][j] + f[i-1][j] + f[i-1][j+1] * 2) % p\n\n    for i in range(m, n+1):\n        f[i][m] = (f[i][m] + f[i-1][m] + f[i-1][m-1] * 2) % p\n    \n    for i in range(n+1):\n        for j in range(0, i+1):\n            s[i][j] = (s[i][j] + s[i][j-1] + f[i][j]) % p\n\n    g[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(k+1):\n            for l in range(min(j, i)+1):\n                g[i][j] = (g[i][j] + g[i-l-1][j-l] * s[l][min(l, m-1)] % p * c[i-1][l]) % p\n    \n    return g[n][k]\n"}