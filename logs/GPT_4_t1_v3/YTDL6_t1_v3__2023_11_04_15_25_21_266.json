{
    "prompt": "The following `parse_iso8601` function and docstring refer to a utility function to convert an ISO datetime into a UNIX timestamp, in the context of a project to download videos from video hosting services, such as Youtube. The function is as follows: ```def parse_iso8601(date_str, delimiter='T', timezone=None):\n    \"\"\" Return a UNIX timestamp from the given date.\n        Delimiter corresponds to the time delimiter (e.g. 2023-10-19T00:00:00+0000)\n    \"\"\"\n\n    pass```. Complete the function, having it return a string corresponing to the UNIX timestamp if the datetime is valid, or None otherwise.\n\nExamples:\n\nInput: 2014-03-23T23:04:26+0100\nOutput: 1395612266000\n\nInput: 2014-03-23T22:04:26Z\nOutput: 1395612266000",
    "response": "from datetime import datetime\nfrom pytz import timezone\n\ndef parse_iso8601(date_str, delimiter='T', timezone=None):\n    \"\"\" \n    Return a UNIX timestamp from the given date.\n    Delimiter corresponds to the time delimiter (e.g. 2023-10-19T00:00:00+0000)\n    \"\"\"\n\n    try:\n        if timezone is not None:\n            datetime_object = datetime.strptime(date_str, \"%Y-%m-%d{}%H:%M:%S%z\".format(delimiter))\n            datetime_object = datetime_object.replace(tzinfo=timezone(timezone))\n        elif 'Z' in date_str:\n            datetime_object = datetime.strptime(date_str, \"%Y-%m-%d{}%H:%M:%SZ\".format(delimiter))\n        else:\n            datetime_object = datetime.strptime(date_str, \"%Y-%m-%d{}%H:%M:%S%z\".format(delimiter))\n\n        return int(datetime_object.timestamp() * 1000)\n    except ValueError:\n        # If the input does not follow the proper ISO8601 format,\n        # return None\n        return None",
    "test_results": "Test failed: result 1395612266000 != 1395612266 (expected)"
}