{"prompt": "For a given array a of length n, write a function to find all integers x >= 0 such that there exists an increasing subsequence of the array a, in which the bitwise XOR of numbers is equal to x. A sequence s is a subsequence of a sequence b if s can be obtained from b by deletion of several (possibly, zero or all) elements. A sequence s1, s2, ..., sm is called increasing if s1 < s2 < ... < sm. The function must receive a list with n integers a1, a2, ..., an - the elements of the array a. The function must return a list of integers x1, x2, ..., xk, in increasing order - the found x values.\n\nExamples:\n\nInput: 4 2 2 4\nOutput: [0, 2, 4, 6]\n\nInput: 1 0 1 7 12 5 3 2\nOutput: [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13]", "response": "def find_xor_subsequences(a):\n    n = len(a)\n    xor_values = set()\n    for i in range(1, (1 << n)):\n        xor_val = 0\n        prev_val = -1\n        increasing = True\n        for j in range(n):\n            if (i & (1 << j)) > 0:\n                if prev_val != -1 and prev_val >= a[j]:\n                    increasing = False\n                    break\n                xor_val ^= a[j]\n                prev_val = a[j]\n        if increasing:\n            xor_values.add(xor_val)\n    return sorted(list(xor_values))"}