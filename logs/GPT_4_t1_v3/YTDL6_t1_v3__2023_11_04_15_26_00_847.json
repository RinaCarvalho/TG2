{"prompt": "The following `parse_iso8601` function and docstring refer to a utility function to convert an ISO datetime into a UNIX timestamp, in the context of a project to download videos from video hosting services, such as Youtube. The function is as follows: ```def parse_iso8601(date_str, delimiter='T', timezone=None):\n    \"\"\" Return a UNIX timestamp from the given date.\n        Delimiter corresponds to the time delimiter (e.g. 2023-10-19T00:00:00+0000)\n    \"\"\"\n\n    pass```. Complete the function, having it return a string corresponing to the UNIX timestamp if the datetime is valid, or None otherwise.\n\nExamples:\n\nInput: 2014-03-23T23:04:26+0100\nOutput: 1395612266000\n\nInput: 2014-03-23T22:04:26Z\nOutput: 1395612266000", "response": "\nfrom datetime import datetime\nimport pytz\n\ndef parse_iso8601(date_str, delimiter='T', timezone=None):\n    \"\"\"Return a UNIX timestamp from the given date.\n    Delimiter corresponds to the time delimiter (e.g. 2023-10-19T00:00:00+0000)\n    \"\"\"\n    \n    try:\n        if timezone:\n            dt = datetime.strptime(date_str, '%Y-%m-%d'+delimiter+'%H:%M:%S%z')\n        elif 'Z' in date_str:\n            dt = datetime.strptime(date_str, '%Y-%m-%d'+delimiter+'%H:%M:%SZ')\n        else:\n            dt = datetime.strptime(date_str, '%Y-%m-%d'+delimiter+'%H:%M:%S')\n        unix_timestamp = dt.replace(tzinfo=pytz.UTC).timestamp()\n        return int(unix_timestamp * 1000)\n    except ValueError:\n        return None\n"}