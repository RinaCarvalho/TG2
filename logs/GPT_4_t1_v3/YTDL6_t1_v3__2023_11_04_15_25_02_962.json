{"prompt": "The following `parse_iso8601` function and docstring refer to a utility function to convert an ISO datetime into a UNIX timestamp, in the context of a project to download videos from video hosting services, such as Youtube. The function is as follows: ```def parse_iso8601(date_str, delimiter='T', timezone=None):\n    \"\"\" Return a UNIX timestamp from the given date.\n        Delimiter corresponds to the time delimiter (e.g. 2023-10-19T00:00:00+0000)\n    \"\"\"\n\n    pass```. Complete the function, having it return a string corresponing to the UNIX timestamp if the datetime is valid, or None otherwise.\n\nExamples:\n\nInput: 2014-03-23T23:04:26+0100\nOutput: 1395612266000\n\nInput: 2014-03-23T22:04:26Z\nOutput: 1395612266000", "response": "import datetime\n\ndef parse_iso8601(date_str, delimiter='T', timezone=None):\n    \"\"\" Return a UNIX timestamp from the given date.\n        Delimiter corresponds to the time delimiter (e.g. 2023-10-19T00:00:00+0000)\n    \"\"\"\n    try:\n        naive_date_str = date_str.replace(delimiter, ' ')\n        naive_date_str = naive_date_str.rstrip('Z')\n        if '+' in naive_date_str:\n            naive_date_str = naive_date_str.split('+')[0]\n        elif '-' in naive_date_str:\n            naive_date_str = naive_date_str.split('-')[0]\n        naive_date = datetime.datetime.strptime(naive_date_str, '%Y-%m-%d %H:%M:%S')\n        unix_timestamp = int(naive_date.strftime('%s')) * 1000\n        return unix_timestamp\n    except ValueError:\n        return None"}