{
    "prompt": "For a given matrix, write a function to check if the matrix is a magic square. The function must receive a list of lists and return a boolean.\n\nExamples:\n\nInput: ['[2, 7, 6]', '[9, 5, 1]', '[4, 3, 8]']\nOutput: True\n\nInput: ['[2, 7, 6]', '[9, 5, 1]', '[4, 3, 7]']\nOutput: False",
    "response": "def is_magic_square(matrix):\n    # Convert to integer type from string type\n    matrix = list(map(lambda s: list(map(int, s[1:-1].split(\", \"))), matrix))\n    \n    # Transpose the matrix\n    transpose_matrix = list(map(list, zip(*matrix))) \n    \n    # Number of rows/columns of the matrix\n    n = len(matrix);\n    \n    # Expected magic constant for the square\n    magic_sum = sum(matrix[0])\n    \n    # Check equality of the sum of elements in each row and the magic constant\n    if any(sum(row) != magic_sum for row in matrix):\n        return False\n\n    # Check equality of the sum of elements in each columns and the magic constant\n    if any(sum(column) != magic_sum for column in transpose_matrix):\n        return False\n    \n    # Check equality of the sum of the diagonals and the magic constant\n    if (sum(matrix[i][i] for i in range(n)) != magic_sum or\n        sum(matrix[i][n-i-1] for i in range(n)) != magic_sum):\n        return False\n         \n    # If no checks have failed, the square is magic   \n    return True",
    "test_results": "Test failed: 'list' object has no attribute 'split'"
}