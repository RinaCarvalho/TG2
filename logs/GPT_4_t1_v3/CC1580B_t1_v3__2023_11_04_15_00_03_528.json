{
    "prompt": "Let c_1, c_2, \u2026, c_n be a permutation of integers 1, 2, \u2026, n. Consider all subsegments of this permutation containing an integer x. Given an integer m, we call the integer x good if there are exactly m different values of maximum on these subsegments. A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array). A sequence a is a subsegment of a sequence b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. Given four integers n, m, k and p, write a function to count the number of permutations of length n with exactly k good numbers, modulo p. The function must receive four integers n, m, k and p and return an integer.\n\nExamples:\n\nInput: 4 3 2 10007\nOutput: 4\n\nInput: 6 4 1 769626776\nOutput: 472\n\nInput: 66 11 9 786747482\nOutput: 206331312\n\nInput: 99 30 18 650457567\nOutput: 77365367",
    "response": "def count_permutations(n, m, k, p):\n    comb = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    dp = [[[0 for _ in range(k+1)] for _ in range(n+1)] for _ in range(n+1)]\n    fact = [0 for _ in range(n+1)]\n    inv = [0 for _ in range(n+1)]\n    fact[0] = 1\n    inv[0] = 1\n\n    def power(x, y):\n        ans = 1\n        while y:\n            if y & 1:\n                ans = (ans * x) % p\n            x = (x * x) % p\n            y >>= 1\n        return ans\n\n    for i in range(1, n+1):\n        fact[i] = (fact[i-1] * i) % p\n        inv[i] = power(fact[i], p-2)\n\n    def calc_c(a, b):\n        if a < b:\n            return 0\n        return (fact[a] * inv[b] % p) * inv[a-b] % p\n\n    for i in range(n+1):\n        for j in range(i+1):\n            comb[i][j] = calc_c(i, j)\n\n    dp[0][0][0] = 1\n    for i in range(1, n+1):\n        for j in range(i+1):\n            for kk in range(min(k, j)+1):\n                dp[i][j][kk] = dp[i-1][j][kk]\n\n                if j:\n                    dp[i][j][kk] = (dp[i][j][kk] + dp[i-1][j-1][kk]*comb[n-j][m-1]) % p\n                    if kk:\n                        dp[i][j][kk] = (dp[i][j][kk] + dp[i-1][j-1][kk-1]*(comb[n-j][m]*j + comb[n-j][m-1]*(j-1))) % p\n                if n-i >= m and kk:\n                    dp[i][j][kk] = (dp[i][j][kk] + dp[i-1][j][kk-1]*comb[n-j][m-1]) % p\n\n    ans = 0\n    for j in range(k, n+1):\n        ans = (ans + dp[n][j][k]*fact[j]) % p\n    return ans\n\nprint(count_permutations(4, 3, 2, 10007))  # 4\nprint(count_permutations(6, 4, 1, 769626776))  # 472\nprint(count_permutations(66, 11, 9, 786747482))  # 206331312\nprint(count_permutations(99, 30, 18, 650457567))  # 77365367",
    "test_results": "Test failed: result 12 != 4 (expected)"
}