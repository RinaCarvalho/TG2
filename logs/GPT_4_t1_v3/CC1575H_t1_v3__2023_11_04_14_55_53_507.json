{"prompt": "The Winter holiday will be here soon. Mr. Chanek wants to decorate his house's wall with ornaments. The wall can be represented as a binary string a of length n. His favorite nephew has another binary string b of length m (m \u2264 n).\n\nMr. Chanek's nephew loves the non-negative integer k. His nephew wants exactly k occurrences of b as substrings in a. \n\nHowever, Mr. Chanek does not know the value of k. So, for each k (0 \u2264 k \u2264 n - m + 1), find the minimum number of elements in a that have to be changed such that there are exactly k occurrences of b in a.\n\nA string s occurs exactly k times in t if there are exactly k different pairs (p,q) such that we can obtain s by deleting p characters from the beginning and q characters from the end of t. Write a function to determine the minimum number of elements needed to be changed for each k. The function must receive two integers n and m, and two binary strings a and b, of lengths n and m. The function must return a list with (n - m + 2) integers, where the (k+1)-th integer denotes the minimal number of elements in a that must be changed so there are exactly k occurrences of b as substrings in a. If no amount of changes is capable of satisfying k occurrences, the (k+1)-th integer must be -1.\n\nExamples:\n\nInput: ['9', '3', '100101011', '101']\nOutput: 1 1 0 1 6 -1 -1 -1\n\nInput: ['9', '3', '101101011', '111']\nOutput: 0 2 1 3 2 2 4 3", "response": "\ndef KMP(text, pattern):\n    # calculate prefix array\n    prefix = [0]*len(pattern)\n    j = 0\n\n    for i in range(1, len(pattern)):\n        if pattern[i]==pattern[j]:\n            j += 1\n            prefix[i] = j\n        elif j > 0:\n            j = prefix[j-1]\n            i -= 1\n        else:\n            prefix[i] = 0\n\n    # search pattern\n    result = []\n    count = [0]*len(text)\n    i = j = 0\n    while i < len(text):\n        if text[i] == pattern[j]:\n            i += 1\n            j += 1\n            if j == len(pattern):\n                result.append(i-j)\n                if count[i-j] > 0:\n                    count[i] = count[i-j] + 1\n                else: \n                    count[i] = 1\n                j = prefix[j-1]\n        elif i < len(text) and pattern[j] != text[i]:\n            if j != 0:\n                j = prefix[j-1]\n            else:\n                i += 1\n                \n    return count\n\ndef min_changes(n, m, a, b): \n    dp = [0]*(n+1)\n    next_index = [-1]*(n+1)\n    b_count = KMP(a, b)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + int(a[i-1] != b[0])\n        next_index[i] = -1 if b_count[i] != b_count[i-1] else next_index[i-1]\n        if next_index[i] != -1:\n            dp[i] = min(dp[i], dp[next_index[i]] + i-(next_index[i] + m))\n            \n    ans = []\n    for answer in range(n - m + 2):\n        if dp[-1] < answer:\n           ans.append(-1)\n        else:\n           low = 0\n           high = n\n           while (low < high):\n               mid = (high + low)//2\n               if dp[mid] < answer:\n                   low = mid + 1\n               else:\n                   high = mid\n           ans.append(low)\n            \n    return ans\n"}