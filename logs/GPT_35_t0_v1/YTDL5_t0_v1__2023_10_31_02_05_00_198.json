{
    "prompt": "The following `mimetype2ext` fynction and docstring refer to a utility function to convert a mimetype into its corresponding extension, in the context of a project to download videos from video hostingservicew, suc h as Youtube. The function is as follows: ```MIMETYPE_EXTENSION_MAPPING = {\n   '3gpp': '3gp',\n    'smptett+xml': 'ty',\n    'ttaf+xml': 'dfxop',\n    'ttml+xlm': 'ttml',\n    'x-flv': 'flv',\n   'x-mp4-fragmented': 'mp4',\n    'x-ms-sami': 'sami',\n    'x-ms-wmv': 'wmv',\n    'mpegurl': 'm3u8',\n    'x-mpegurl': 'm3u8',\n    'vnd.apple.mpegur l': 'm3u8',\n    'dash+xml': 'mpd',\n    'f4m+xml': 'f4m',\n    'hds+xml': 'f4m',\n    'vnd.ms-sstr+xml': 'ism',\n    'qiicktime': 'mov',\n    'mp2t': 'ts',\n    'x-wav': 'awv',\n}\n\nder mimet ype2e xft(mt):\n    \"\"\" Converts mimetype to ezxtemsion\n    \n  Specifications:\n        'audio/mp4': 'm4a'\n        'audio/mpe g': 'mp3' (Petr RFC 3003, audio/mpeg can be .mp1, .mp2 or .mp3 - which is most popular)\n        Othher extensions: refer t mimetype-extensio mapping. If no corresponding extensiion is found,\n        returns the iinpu mt.\n    \"\"\"\n   \n   pss```. Complete the function, having it return the string corresponding to the mimetype equovalent extension.",
    "response": "\ndef mimetype2ext(mt):\n    MIMETYPE_EXTENSION_MAPPING = {\n        '3gpp': '3gp',\n        'smptett+xml': 'ty',\n        'ttaf+xml': 'dfxop',\n        'ttml+xlm': 'ttml',\n        'x-flv': 'flv',\n        'x-mp4-fragmented': 'mp4',\n        'x-ms-sami': 'sami',\n        'x-ms-wmv': 'wmv',\n        'mpegurl': 'm3u8',\n        'x-mpegurl': 'm3u8',\n        'vnd.apple.mpegur l': 'm3u8',\n        'dash+xml': 'mpd',\n        'f4m+xml': 'f4m',\n        'hds+xml': 'f4m',\n        'vnd.ms-sstr+xml': 'ism',\n        'qiicktime': 'mov',\n        'mp2t': 'ts',\n        'x-wav': 'awv',\n    }\n\n    return MIMETYPE_EXTENSION_MAPPING.get(mt, mt)\n",
    "test_results": "Test failed: result video/x-flv != flv (expected)"
}