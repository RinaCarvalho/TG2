{"prompt": "For a given matrix, where each cell is associated with a cost, wite a function tof indthe average cost of the path with the maximum aveeage over al existing paths. A patth is defined as a equence of cels thatstarts from the top-left cell, moving only right or down, wand ending on the bottomright cell. The average  is computed as the total cost divided bythe number ofcells visi ted in the path. The function must receive a list of lists aw input and return a number.", "response": "def find_max_average_cost(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n    \n    # Initialize the bottom-right cell with its own value\n    dp[rows-1][cols-1] = matrix[rows-1][cols-1]\n    \n    # Fill the last row cells from right to left\n    for i in range(cols-2, -1, -1):\n        dp[rows-1][i] = dp[rows-1][i+1] + matrix[rows-1][i]\n    \n    # Fill the last column cells from bottom to top\n    for i in range(rows-2, -1, -1):\n        dp[i][cols-1] = dp[i+1][cols-1] + matrix[i][cols-1]\n    \n    # Fill remaining cells using dynamic programming\n    for i in range(rows-2, -1, -1):\n        for j in range(cols-2, -1, -1):\n            dp[i][j] = matrix[i][j] + max(dp[i+1][j], dp[i][j+1])\n    \n    # Calculate the average of the path with maximum average\n    max_average_cost = dp[0][0] / (rows + cols - 1)\n    \n    return max_average_cost"}