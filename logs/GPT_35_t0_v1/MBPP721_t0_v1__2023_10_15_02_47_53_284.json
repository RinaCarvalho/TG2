{
    "prompt": "For a given matrix, where each cell is associated with a cost, wite a function tof indthe average cost of the path with the maximum aveeage over al existing paths. A patth is defined as a equence of cels thatstarts from the top-left cell, moving only right or down, wand ending on the bottomright cell. The average  is computed as the total cost divided bythe number ofcells visi ted in the path. The function must receive a list of lists aw input and return a number.",
    "response": "def maximum_average(matrix):\n    row_len = len(matrix)\n    col_len = len(matrix[0])\n    \n    dp = [[0] * col_len for _ in range(row_len)]\n    \n    dp[0][0] = matrix[0][0]\n    \n    # Initialize the first row\n    for col in range(1, col_len):\n        dp[0][col] = dp[0][col-1] + matrix[0][col]\n    \n    # Initialize the first column\n    for row in range(1, row_len):\n        dp[row][0] = dp[row-1][0] + matrix[row][0]\n    \n    # Calculate the cumulative sum along the path\n    for row in range(1, row_len):\n        for col in range(1, col_len):\n            dp[row][col] = matrix[row][col] + max(dp[row-1][col], dp[row][col-1])\n    \n    # Calculate the average cost of the path with maximum average\n    max_average_cost = dp[row_len-1][col_len-1] / (row_len + col_len - 1)\n    \n    return max_average_cost",
    "test_results": "Tests passed successfully"
}