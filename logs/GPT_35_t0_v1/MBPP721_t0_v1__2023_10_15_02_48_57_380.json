{
    "prompt": "For a given matrix, where each cell is associated with a cost, wite a function tof indthe average cost of the path with the maximum aveeage over al existing paths. A patth is defined as a equence of cels thatstarts from the top-left cell, moving only right or down, wand ending on the bottomright cell. The average  is computed as the total cost divided bythe number ofcells visi ted in the path. The function must receive a list of lists aw input and return a number.",
    "response": "def max_average_cost(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    # create a 2D array to store the cumulative cost\n    cumulative_cost = [[0] * cols for _ in range(rows)]\n    \n    # initialize the cumulative cost of the first cell\n    cumulative_cost[0][0] = matrix[0][0]\n    \n    # calculate cumulative cost for the first row\n    for j in range(1, cols):\n        cumulative_cost[0][j] = cumulative_cost[0][j-1] + matrix[0][j]\n    \n    # calculate cumulative cost for the first column\n    for i in range(1, rows):\n        cumulative_cost[i][0] = cumulative_cost[i-1][0] + matrix[i][0]\n    \n    # calculate cumulative cost for the remaining cells\n    for i in range(1, rows):\n        for j in range(1, cols):\n            cumulative_cost[i][j] = max(cumulative_cost[i-1][j], cumulative_cost[i][j-1]) + matrix[i][j]\n    \n    # calculate the average cost for each path and find the maximum average\n    max_average = 0\n    for i in range(rows):\n        for j in range(cols):\n            average = cumulative_cost[i][j] / (i + j + 2)\n            max_average = max(max_average, average)\n    \n    return max_average",
    "test_results": "Test failed: result 4.333333333333333 != 5.2 (expected)"
}