{
    "prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.",
    "response": "def max_average_cost(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    # create a 2D list to store the maximum average cost at each cell\n    max_avg = [[0] * cols for _ in range(rows)]\n    \n    # calculate the maximum average cost for each cell\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                max_avg[i][j] = matrix[i][j]\n            elif i == 0:\n                max_avg[i][j] = max_avg[i][j-1] + matrix[i][j]\n            elif j == 0:\n                max_avg[i][j] = max_avg[i-1][j] + matrix[i][j]\n            else:\n                max_avg[i][j] = max(max_avg[i-1][j], max_avg[i][j-1]) + matrix[i][j]\n    \n    # calculate the average of the path with the maximum average cost\n    return max_avg[-1][-1] / (rows + cols - 1)",
    "test_results": "Tests passed successfully"
}