{
    "prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.",
    "response": "def find_max_average_cost(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    # create a 2D dp table to store the cumulative cost\n    dp = [[0] * cols for _ in range(rows)]\n    \n    # initialize the first cell's cost\n    dp[0][0] = matrix[0][0]\n    \n    # calculate the cumulative cost for each cell in the first row\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    \n    # calculate the cumulative cost for each cell in the first column\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    \n    # calculate the cumulative cost for each cell in the remaining rows and columns\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    # calculate the average cost of the path with maximum average\n    return dp[rows-1][cols-1] / (rows + cols - 1)",
    "test_results": "Tests passed successfully"
}