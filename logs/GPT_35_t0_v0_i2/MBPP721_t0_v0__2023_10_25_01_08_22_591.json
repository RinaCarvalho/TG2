{
    "prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.",
    "response": "def find_max_average(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    # Create a 2D dp table to store the maximum average values\n    dp = [[0.0] * cols for _ in range(rows)]\n\n    # Iterate over the matrix in reverse order\n    for i in range(rows-1, -1, -1):\n        for j in range(cols-1, -1, -1):\n            # If it's the bottom-right cell, set the average value as the current cell cost\n            if i == rows-1 and j == cols-1:\n                dp[i][j] = matrix[i][j]\n            # If it's the last row, update the average value as the sum of the current cell cost and the right cell average\n            elif i == rows-1:\n                dp[i][j] = matrix[i][j] + dp[i][j+1]\n            # If it's the last column, update the average value as the sum of the current cell cost and the down cell average\n            elif j == cols-1:\n                dp[i][j] = matrix[i][j] + dp[i+1][j]\n            # Update the average value as the maximum between the right and down cell averages\n            else:\n                dp[i][j] = matrix[i][j] + max(dp[i][j+1], dp[i+1][j])\n\n    # Return the average value of the top-left cell which represents the maximum average value\n    return dp[0][0] / (rows + cols - 1)",
    "test_results": "Tests passed successfully"
}