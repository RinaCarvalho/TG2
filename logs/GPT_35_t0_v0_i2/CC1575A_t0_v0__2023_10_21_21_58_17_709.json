{
    "prompt": "Ally and Billy were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m. Ally really wants to sort the book lexicographically ascending, while Billy wants to sort it lexicographically descending.\n\nSettling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.\n\nA string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:\n\n  * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; \n  * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. Write a function to perform the aforementioned asc-desc-ending sorting. The function must receive two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6), as well as a list, with n strings of length m. The function must return a list of integers, corresponding to the inices of the strings, starting at 1, after they are sorted asc-desc-endingly.",
    "response": "def sort_asc_desc_ending(n, m, books):\n    def compare_strings(a, b):\n        for i in range(m):\n            if i % 2 == 0:\n                if a[i] > b[i]:\n                    return -1\n                elif a[i] < b[i]:\n                    return 1\n            else:\n                if a[i] < b[i]:\n                    return -1\n                elif a[i] > b[i]:\n                    return 1\n        return 0\n    \n    sorted_indices = sorted(range(n), key=lambda i: books[i])\n    return sorted(sorted_indices, key=lambda i: books[i], cmp=compare_strings)",
    "test_results": "Test failed: 'cmp' is an invalid keyword argument for sort()"
}