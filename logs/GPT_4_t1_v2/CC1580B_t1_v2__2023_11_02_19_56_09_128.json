{"prompt": "Let c_1, c_2, \u2026, c_n be a permutation of integers 1, 2, \u2026, n. Consider all subsegments of this permutation containing an integer x. Given an integer m, we call the integer x good if there are exactly m different values of maximum on these subsegments. A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array). A sequence a is a subsegment of a sequence b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. Given four integers n, m, k and p, write a function to count the number of permutations of length n with exactly k good numbers, modulo p. The function must receive four integers n, m, k and p and return an integer.\n\nExamples:\n\nInput: ['4', '3', '2', '10007']\nOutput: 4\n\nInput: ['6', '4', '1', '769626776']\nOutput: 472\n\nInput: ['66', '11', '9', '6747482']\nOutput: 206331312\n\nInput: ['99', '30', '18', '457567']\nOutput: 77365367", "response": "def countPermutations(n, m, k, p):\n    fa = [0] * (n + 11)\n    ifa = [0] * (n + 11)\n    f = [[0] * (n + 11) for _ in range(n + 11)]\n    g = [[0] * (n + 11) for _ in range(n + 11)]\n    \n    fa[0] = 1\n\n    for i in range(1, n + 10):\n        fa[i] = fa[i - 1] * i % p\n\n    ifa[n + 10] = pow(fa[n + 10], p - 2, p)\n\n    for i in range(n + 9, -1, -1):\n        ifa[i] = ifa[i + 1] * (i + 1) % p\n\n    def C(n, m):\n        return fa[n] * ifa[m] % p * ifa[n - m] % p\n\n    for i in range(n + 1):\n        for j in range(i + 1):\n            if j <= m:\n                f[i][j] = C(i, j)\n            f[i][j] = (f[i][j] + f[i - 1][j] + f[i - 1][j - 1] * (i - j + 1)) % p\n            g[i][j] = (g[i - 1][j] + f[i - 1][j]) % p\n            if j:\n                g[i][j] = (g[i][j] + g[i - 1][j - 1] + f[i - 1][j - 1]) % p\n    ans = 0\n    for i in range(m, n + 1):\n        for j in range(k + 1):\n            if j > i or k - j > n - i:\n                continue\n            now = f[i][j] * g[n - i][k - j] % p * C(n, i) % p\n            if (i - m) & 1:\n                ans = (ans - now) % p\n            else:\n                ans = (ans + now) % p\n    return ans\n\nprint(countPermutations(4, 3, 2, 10007))\nprint(countPermutations(6, 4, 1, 769626776))\nprint(countPermutations(66, 11, 9, 6747482))\nprint(countPermutations(99, 30, 18, 457567))"}