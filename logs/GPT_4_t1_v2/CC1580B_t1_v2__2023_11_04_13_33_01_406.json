{"prompt": "Let c_1, c_2, \u2026, c_n be a permutation of integers 1, 2, \u2026, n. Consider all subsegments of this permutation containing an integer x. Given an integer m, we call the integer x good if there are exactly m different values of maximum on these subsegments. A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array). A sequence a is a subsegment of a sequence b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. Given four integers n, m, k and p, write a function to count the number of permutations of length n with exactly k good numbers, modulo p. The function must receive four integers n, m, k and p and return an integer.\n\nExamples:\n\nInput: ['4', '3', '2', '10007']\nOutput: 4\n\nInput: ['6', '4', '1', '769626776']\nOutput: 472\n\nInput: ['66', '11', '9', '6747482']\nOutput: 206331312\n\nInput: ['99', '30', '18', '457567']\nOutput: 77365367", "response": "def count_permutations(n, m, k, p):\n    fac = [1]\n    inv = [1]\n    invfac = [1]\n    for i in range(1, n + 1):\n        fac.append((fac[-1] * i) % p)\n        inv.append((p - p//i) * inv[p%i] % p)\n        invfac.append((invfac[-1] * inv[-1]) % p)\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp1 = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = fac[i]\n        dp1[i][min(i, m)] = fac[i]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j] * (i - j)) % p\n            dp1[i][j] = (dp[i][j] + dp1[i - 1][j] * (i - j)) % p\n\n    C = lambda n, m: 0 if n < m or m < 0 else fac[n] * invfac[m] * invfac[n - m] % p\n    f = [0] * (n + 1)\n    for i in range(m, n + 1):\n        f[i] = (C(n, i) - f[i - 1] * C(n - 1, i - 1)) % p\n    for i in range(m + 1, n + 1):\n        f[i] = (f[i] + f[i - 1]) % p\n\n    ans = 0\n    for i in range(m, n + 1):\n        for j in range(k + 1):\n            ans = (ans + dp[n - m][j] * dp1[m][k - j] % p * C(n, i) % p * f[i]) % p\n    return ans\n\nprint(count_permutations(4, 3, 2, 10007))\nprint(count_permutations(6, 4, 1, 769626776))\nprint(count_permutations(66, 11, 9, 6747482))\nprint(count_permutations(99, 30, 18, 457567))"}