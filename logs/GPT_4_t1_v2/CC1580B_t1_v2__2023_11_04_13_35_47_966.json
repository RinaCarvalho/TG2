{"prompt": "Let c_1, c_2, \u2026, c_n be a permutation of integers 1, 2, \u2026, n. Consider all subsegments of this permutation containing an integer x. Given an integer m, we call the integer x good if there are exactly m different values of maximum on these subsegments. A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array). A sequence a is a subsegment of a sequence b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. Given four integers n, m, k and p, write a function to count the number of permutations of length n with exactly k good numbers, modulo p. The function must receive four integers n, m, k and p and return an integer.\n\nExamples:\n\nInput: ['4', '3', '2', '10007']\nOutput: 4\n\nInput: ['6', '4', '1', '769626776']\nOutput: 472\n\nInput: ['66', '11', '9', '6747482']\nOutput: 206331312\n\nInput: ['99', '30', '18', '457567']\nOutput: 77365367", "response": "def count_permutations(n, m, k, p):\n    fact = [0]*(n+1)\n    invfact = [0]*(n+1)\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    dp2 = [[0]*(k+1) for _ in range(n+1)]\n    \n    def power(x, y):\n        if y == 0:\n            return 1\n        elif int(y%2) == 0:\n            return (power(x, int(y/2))**2)% p\n        else:\n            return (x * power(x, int(y/2 - 0.5))**2)% p\n    \n    def comb(n, k):\n        if  k > n or k < 0:\n            return 0\n        return fact[n] * invfact[k] * invfact[n - k] % p\n    \n    fact[0] = 1\n    invfact[0] = 1\n    for i in range(1, n+1):\n        fact[i] = fact[i-1]*i%p\n        invfact[i] = power(fact[i], p-2)\n    \n    dp[0][0] = dp2[0][0] = 1\n    for i in range(m):\n        dp[i+1][1] = dp[i][0]*i%p\n        dp2[i+1][1] = (dp2[i][1] + dp[i+1][1])%p\n    \n    for i in range(m, n):\n        for j in range(min(i+1, k)+1):\n            dp[i+1][j] += dp[i][j]\n            if j > 0:\n                dp[i+1][j] += dp[i][j-1]*min(j, m-1)\n            dp[i+1][j] %= p\n        for j in range(min(i+2, k)+1):\n            dp2[i+1][j] = dp2[i][j]\n            if j > 0:\n                dp2[i+1][j] += dp[i+1][j-1]*min(j, m)\n            dp2[i+1][j] %= p\n    \n    ans = 0\n    for i in range(k, n+1):\n        if i <= m:\n            val = dp[n][i]\n        else:\n            val = dp2[n][i]\n        ans += val * comb(n, i) % p\n        ans %= p\n    \n    return ans\n\ncount_permutations(4, 3, 2, 10007) # Expected output: 4\ncount_permutations(6, 4, 1, 769626776) # Expected output: 472\ncount_permutations(66, 11, 9, 6747482) # Expected output: 206331312\ncount_permutations(99, 30, 18, 457567) # Expected output: 77365367"}