{"prompt": "The following `escape_rfc3986` function and docstring refer to a utility function to escape non-ASCII characters from a given string, in the context of a project to download videos from video hosting services, such as Youtube. The function is as follows: ```def escape_rfc3986(s):\n    \"\"\" Escape non-ASCII characters as suggested by RFC 3986.\n        The characters \"!*'();:@&=+$,/?%#[]\" are reserved and aren't converted.\n    \"\"\"\n    pass```. Complete the function, having it return the escaped string.\n\nExamples:\n\nInput: !*'();:@&=+$,/?%#[]\nOutput: %21%2A%5C%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%25%23%5B%5D\n\nInput: foo bar\nOutput: foo%20bar", "response": "import urllib.parse\n\ndef escape_rfc3986(s):\n    \"\"\" Escape non-ASCII characters as suggested by RFC 3986.\n        The characters \"!*'();:@&=+$,/?%#[]\" are reserved and aren't converted.\n    \"\"\"\n    # Create a string of reserved characters\n    reserved_chars = \"!*'();:@&=+$,/?%#[]\"\n    \n    # Create an empty string\n    escaped_string = \"\"\n    \n    # For each character in the input string\n    for char in s:\n        # If the character is a reserved character\n        if char in reserved_chars:\n            # Add the percent encoded character to the escaped_string\n            escaped_string += '%' + format(ord(char), 'x')\n        else:\n            # Add the input char encoded using RFC 3986 rules to the escaped_string\n            escaped_string += urllib.parse.quote(char, safe='')\n \n    return escaped_string"}