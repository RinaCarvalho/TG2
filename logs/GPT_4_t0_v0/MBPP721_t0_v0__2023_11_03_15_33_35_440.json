{"prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.", "response": "\ndef max_average_path(matrix):\n    rows, cols = len(matrix), len(matrix[0])\n    path_cost = [[0 for _ in range(cols)] for __ in range(rows)]\n    path_cost[0][0] = matrix[0][0]\n\n    # initialize the first row and first column\n    for i in range(1, rows):\n        path_cost[i][0] = matrix[i][0] + path_cost[i-1][0]\n    for j in range(1, cols):\n        path_cost[0][j] = matrix[0][j] + path_cost[0][j-1]\n\n    # for the remaining cells, maximize the path cost based on the value of the top and left cell\n    for i in range(1, rows):\n        for j in range(1, cols):\n            path_cost[i][j] = max(path_cost[i-1][j], path_cost[i][j-1]) + matrix[i][j]\n\n    # the maximum average path cost is the total path cost \n    # divided by the number of cells in the path (rows + cols - 1)\n    return path_cost[-1][-1] / (rows + cols - 1)\n\n"}