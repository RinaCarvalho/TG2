{
    "prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.",
    "response": "\ndef max_average_path(matrix):\n    # Initializing a 2D list with the size of the matrix filled with 0s.\n    average_path_values = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n    \n    # Base case for the top-left cell.\n    average_path_values[0][0] = matrix[0][0]\n    \n    # Populating the first row of average_path_values.\n    for i in range(1, len(matrix[0])):\n        average_path_values[0][i] = average_path_values[0][i - 1] + matrix[0][i]\n        \n    # Populating the first column of average_path_values.\n    for i in range(1, len(matrix)):\n        average_path_values[i][0] = average_path_values[i - 1][0] + matrix[i][0]\n        \n    # Populating the rest of the cells.\n    for i in range(1, len(matrix)):\n        for j in range(1, len(matrix[0])):\n            # Maximum possible path up to this point is the max of the path above or to the left plus this cell value.\n            average_path_values[i][j] = max(average_path_values[i - 1][j], average_path_values[i][j - 1]) + matrix[i][j]\n            \n    # The maximum average from top-left to bottom-right is the total value of path / number of cells visited.\n    # Number of cells visited would be equal to sum of the rows and columns size of matrix.\n    return average_path_values[-1][-1] / (len(matrix) + len(matrix[0]) - 1)\n",
    "test_results": "Tests passed successfully"
}