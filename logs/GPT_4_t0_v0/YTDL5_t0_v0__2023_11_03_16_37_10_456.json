{"prompt": "The following `mimetype2ext` function and docstring refer to a utility function to convert a mimetype into its corresponding extension, in the context of a project to download videos from video hosting services, such as Youtube. The function is as follows: ```MIMETYPE_EXTENSION_MAPPING = {\n    '3gpp': '3gp',\n    'smptett+xml': 'tt',\n    'ttaf+xml': 'dfxp',\n    'ttml+xml': 'ttml',\n    'x-flv': 'flv',\n    'x-mp4-fragmented': 'mp4',\n    'x-ms-sami': 'sami',\n    'x-ms-wmv': 'wmv',\n    'mpegurl': 'm3u8',\n    'x-mpegurl': 'm3u8',\n    'vnd.apple.mpegurl': 'm3u8',\n    'dash+xml': 'mpd',\n    'f4m+xml': 'f4m',\n    'hds+xml': 'f4m',\n    'vnd.ms-sstr+xml': 'ism',\n    'quicktime': 'mov',\n    'mp2t': 'ts',\n    'x-wav': 'wav',\n}\n\ndef mimetype2ext(mt):\n    \"\"\" Converts mimetype to extension\n    \n    Specifications:\n        'audio/mp4': 'm4a'\n        'audio/mpeg': 'mp3' (Per RFC 3003, audio/mpeg can be .mp1, .mp2 or .mp3 - which is most popular)\n        Other extensions: refer to mimetype-extension mapping. If no corresponding extension is found,\n        returns the input mt.\n    \"\"\"\n    \n    pass```. Complete the function, having it return the string corresponding to the mimetype equivalent extension.", "response": "\ndef mimetype2ext(mt):\n    \"\"\" Converts mimetype to extension\n    \n    Specifications:\n        'audio/mp4': 'm4a'\n        'audio/mpeg': 'mp3' (Per RFC 3003, audio/mpeg can be .mp1, .mp2 or .mp3 - which is most popular)\n        Other extensions: refer to mimetype-extension mapping. If no corresponding extension is found,\n        returns the input mt.\n    \"\"\"\n    \n    MIMETYPE_EXTENSION_MAPPING = {\n        '3gpp': '3gp',\n        'smptett+xml': 'tt',\n        'ttaf+xml': 'dfxp',\n        'ttml+xml': 'ttml',\n        'x-flv': 'flv',\n        'x-mp4-fragmented': 'mp4',\n        'x-ms-sami': 'sami',\n        'x-ms-wmv': 'wmv',\n        'mpegurl': 'm3u8',\n        'x-mpegurl': 'm3u8',\n        'vnd.apple.mpegurl': 'm3u8',\n        'dash+xml': 'mpd',\n        'f4m+xml': 'f4m',\n        'hds+xml': 'f4m',\n        'vnd.ms-sstr+xml': 'ism',\n        'quicktime': 'mov',\n        'mp2t': 'ts',\n        'x-wav': 'wav',\n    }\n\n    if mt == 'audio/mp4':\n        return 'm4a'\n    elif mt == 'audio/mpeg':\n        return 'mp3'\n    else:\n        mt_short = mt.split('/')[-1]\n        return MIMETYPE_EXTENSION_MAPPING.get(mt_short, mt)\n"}