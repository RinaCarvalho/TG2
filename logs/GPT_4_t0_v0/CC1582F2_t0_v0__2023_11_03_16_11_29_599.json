{
    "prompt": "For a given array a of length n, write a function to find all integers x >= 0 such that there exists an increasing subsequence of the array a, in which the bitwise XOR of numbers is equal to x. A sequence s is a subsequence of a sequence b if s can be obtained from b by deletion of several (possibly, zero or all) elements. A sequence s1, s2, ..., sm is called increasing if s1 < s2 < ... < sm. The function must receive a list with n integers a1, a2, ..., an - the elements of the array a. The function must return a list of integers x1, x2, ..., xk, in increasing order - the found x values.",
    "response": "def find_XORs(a):\n    XORs = set()\n    n = len(a)\n    for i in range(1 << n):\n        XOR = 0\n        last = -1\n        for j in range(n):\n            if (i & (1 << j)) > 0:\n                if last != -1 and last >= a[j]:\n                    break\n                XOR ^= a[j]\n                last = a[j]\n        else:\n            XORs.add(XOR)\n    return sorted(list(XORs))",
    "test_results": "Tests passed successfully"
}