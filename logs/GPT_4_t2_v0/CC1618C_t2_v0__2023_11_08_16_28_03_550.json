{"prompt": "Consider a given array consisting of positive integers. Upon selecting a positive integer d, all elements of the array which are divisible by d will be painted red, and all other elements will be painted blue. The coloring is called beautiful if there are no pairs of adjacent elements with the same color in the array. Write a function to find the smallest value of d which yields a beautiful coloring, or report that it is impossible. The function must receive a list of integers - the elements of the array - as input, and return a positive integer d, or 0, if there is no value of d that yields a beautiful coloring.\n\nExample:\nInput: [1, 2, 3, 4, 5]\nLet's think step by step. First, we must analyze the divisors of each number of the list. If there are one or more divisors belonging to interspersed elements of the array, then we must return the smallest of these divisors. Otherwise the problem has no solution. In the example, the elements 2 and 4 have 2 as a common divisor, which also isn't a divisor for any other elements of the array. Therefore, the smallest value which returns a beautiful coloring is 2.\nOutput: 2", "response": "def beautiful_coloring(array):\n    array_size = len(array)\n    \n    # Edge case: If the size of the array is 1 or less, there will not be any adjacent elements\n    if array_size <= 1:\n        return 0\n\n    for d in range(1, max(array) + 1):\n        coloring = ['red' if x % d == 0 else 'blue' for x in array]\n        for i in range(1, array_size):\n            if coloring[i] == coloring[i - 1]:\n                break\n        else:\n            return d\n    return 0"}