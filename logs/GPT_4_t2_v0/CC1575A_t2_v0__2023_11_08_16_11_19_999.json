{
    "prompt": "Ally and Billy were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m. Ally really wants to sort the book lexicographically ascending, while Billy wants to sort it lexicographically descending.\n\nSettling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.\n\nA string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:\n\n  * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; \n  * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. Write a function to perform the aforementioned asc-desc-ending sorting. The function must receive two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6), as well as a list, with n strings of length m. The function must return a list of integers, corresponding to the indices of the strings, starting at 1, after they are sorted asc-desc-endingly.\n\nExample:\nInput: [5, 2, [AA, AB, BB, BA, AZ]]\nLet's think step by step. Considering indexes start at 1, first the strings must be ordered lexicographically ascending according to their first letter. Then, for strings with the same first letter, we must analyze the second letter of each string, and then order them in descending order. This process of grouping and ordering strings ascendingly for odd indexes and descendingly for even indexes must be repeated until all strings have been ordered. In the example, we are given the list [AA, AB, BB, BA, AZ]. We must first order the strings ascendingly according to their first letter, thus giving us the intermediate list [AA, AB, AZ, BB, BA]. Then, for each group of strings with the same first letter, we must order their second letters descendingly. Given the strings AA, AB and AZ all start with 'A', ordering their second letters descendingly gives us [AZ, AB, AA]. Similarly for the group of strings starting with the letter 'B', we obtain [BB, BA]. Thus, our asc-desc-ending sorted list is [AZ, AB, AA, BB, BA]. Extracting the original indices of each string, we obtain [5, 2, 1, 3, 4].\nOutput: [5, 2, 1, 3, 4]",
    "response": "\ndef asc_desc_ending(n, m, books):\n    indexed_books = [(i+1, book) for i, book in enumerate(books)]\n    indexed_books.sort(key=lambda x: tuple((ord(ch) if i%2==0 else -ord(ch)) for i, ch in enumerate(x[1])))\n    return [index for index, _ in indexed_books]\n",
    "test_results": "Tests passed successfully"
}