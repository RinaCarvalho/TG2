{"prompt": "Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, .... For a given number n, write a function to count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously). The function must receive an integer n, and return an integer.\n\nExample:\nInput: 10\nLet's think step by step. First, we must determine the square root of n. Then, for each number k smaller than or equal to the square root of n, we must add k^2 to the list of numbers Polycarp likes. Additionally, if k^3 is smaller than n, it must also be added to list. Finally, the number of integers from 1 to n that Polycarp likes will be given by the length of the list. In the example, we first calculate the floor of the square root of 10, which is 3. Then, we iterate over k from 1 to 3. For k = 1, we add it to the list. For k = 2, we add both 2^2 = 4 and 2^3 = 8 to the list. Lastly, for k = 3, we add 3^2 = 9 to the list, totalling 4 numbers.\nOutput: 4", "response": "def count_numbers_polycarp_likes(n):\n    numbers = []\n    sqrt_n = int(n ** 0.5)\n    \n    for k in range(1, sqrt_n + 1):\n        numbers.append(k * k)\n        if k * k * k <= n:\n            numbers.append(k * k * k)\n    \n    return len(numbers)"}