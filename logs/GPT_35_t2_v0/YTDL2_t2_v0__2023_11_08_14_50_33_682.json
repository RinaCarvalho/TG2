{"prompt": "The following `determine_ext` function and docstring refer to a utility function to determine the video extension of a given url, in the context of a project to download videos from video hosting services, such as Youtube. The function is as follows: ```KNOWN_EXTENSIONS = (\n    'mp4', 'm4a', 'm4p', 'm4b', 'm4r', 'm4v', 'aac',\n    'flv', 'f4v', 'f4a', 'f4b',\n    'webm', 'ogg', 'ogv', 'oga', 'ogx', 'spx', 'opus',\n    'mkv', 'mka', 'mk3d',\n    'avi', 'divx',\n    'mov',\n    'asf', 'wmv', 'wma',\n    '3gp', '3g2',\n    'mp3',\n    'flac',\n    'ape',\n    'wav',\n    'f4f', 'f4m', 'm3u8', 'smil')\n\ndef determine_ext(url):\n    \"\"\" Extract the video extension from a URL, returning 'None' if no valid extension was found.\n    URLs such as 'http://example.com/foo/bar.mp4/?download' can also have extensions extracted.\n    \"\"\"\n    \n    pass```. Complete the function, having it return the video extension as a string.\n\nExample:\nInput: http://example.com/foo/bar.mp4/?download\nLet's think step by step. First, we need to parse the input url and remove the base URL. Then, we need to search the remaining string for one of the extensions in the list of known extensions followed by a dot, such as '.wav', and return it if it exists. In the example, parsing the url results in '/foo/bar.mp4/'. If we then perform a search for an extension followed by '.', we are able to extract the '.mp4' extension.\nOutput: mp4", "response": "import re\n\ndef determine_ext(url):\n    path = re.search('/([^/]+/[^/]+/[^/]+)/', url).group(1)\n    for ext in KNOWN_EXTENSIONS:\n        if '.' + ext in path:\n            return ext\n    return None\n\ndetermine_ext('http://example.com/foo/bar.mp4/?download')"}