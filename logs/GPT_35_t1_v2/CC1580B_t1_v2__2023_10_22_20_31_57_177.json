{"prompt": "Let c_1, c_2, \u2026, c_n be a permutation of integers 1, 2, \u2026, n. Consider all subsegments of this permutation containing an integer x. Given an integer m, we call the integer x good if there are exactly m different values of maximum on these subsegments. A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array). A sequence a is a subsegment of a sequence b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. Given four integers n, m, k and p, write a function to count the number of permutations of length n with exactly k good numbers, modulo p. The function must receive four integers n, m, k and p and return an integer.\n\nExamples:\n\nInput: ['4', '3', '2', '10007']\nOutput: 4\n\nInput: ['6', '4', '1', '769626776']\nOutput: 472\n\nInput: ['66', '11', '9', '6747482']\nOutput: 206331312\n\nInput: ['99', '30', '18', '457567']\nOutput: 77365367", "response": "def count_permutations(n, m, k, p):\n    def calculate_combinations(n, k):\n        if k == 0 or k == n:\n            return 1\n        elif k > n // 2:\n            return calculate_combinations(n, n - k)\n        else:\n            num = 1\n            den = 1\n            for i in range(1, k + 1):\n                num *= n - i + 1\n                den *= i\n            return num // den\n\n    def calculate_fixed_good_numbers(n, m, k, p, good_numbers):\n        if m == 1:\n            return n - k + 1\n        elif m > n - k + 1:\n            return 0\n        else:\n            total = 0\n            for i in range(1, n + 1):\n                if i not in good_numbers:\n                    good_numbers.append(i)\n                    total += calculate_fixed_good_numbers(n, m - 1, k - 1, p, good_numbers)\n                    good_numbers.pop()\n            return total\n\n    total = 0\n    for i in range(1, m + 1):\n        combinations = calculate_combinations(m, i)\n        fixed_good_numbers = calculate_fixed_good_numbers(n, i, k, p, [])\n        total += combinations * fixed_good_numbers\n    return total % p"}