{"prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. The duration of the concert is the sum of durations of all songs in that concert. Write a function to find the minimal possible difference in minutes between the concerts durations. The function must receive three integers a, b and c, and return an integer.\n\nExamples:\n\nInput: ['1', '1', '1']\nOutput: 1\n\nInput: ['2', '1', '3']\nOutput: 0", "response": "def minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n\n    # Initialize the minimum difference as the maximum possible value\n    min_difference = float('inf')\n\n    # Generate all possible combinations of songs for the first concert\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                # Calculate the duration of the first concert\n                concert1_duration = i + 2 * j + 3 * k\n\n                # Calculate the duration of the second concert\n                concert2_duration = total_duration - concert1_duration\n\n                # Update the minimum difference if necessary\n                min_difference = min(min_difference, abs(concert1_duration - concert2_duration))\n\n    return min_difference\n\n# Test cases\nprint(minimal_difference(1, 1, 1))  # Output: 1\nprint(minimal_difference(2, 1, 3))  # Output: 0"}