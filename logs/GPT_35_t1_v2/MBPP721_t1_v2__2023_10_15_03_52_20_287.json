{
    "prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.\n\nExamples:\n\nInput: [[1, 2, 3], [6, 5, 4], [7, 3, 9]]\nOutput: 26\n\nInput: [[2, 3, 4], [7, 6, 5], [8, 4, 10]]\nOutput: 31",
    "response": "import numpy as np\n\ndef find_max_avg_path(matrix):\n    rows, cols = len(matrix), len(matrix[0])\n    dp = np.zeros((rows, cols), dtype=np.float)\n    \n    for i in range(rows-1, -1, -1):\n        for j in range(cols-1, -1, -1):\n            if i == rows-1 and j != cols-1:\n                dp[i][j] = dp[i][j+1] + matrix[i][j]\n            elif i != rows-1 and j == cols-1:\n                dp[i][j] = dp[i+1][j] + matrix[i][j]\n            elif i != rows-1 and j != cols-1:\n                dp[i][j] = max(dp[i+1][j], dp[i][j+1]) + matrix[i][j]\n                \n    return round(dp[0][0] / (rows+cols-1), 2)",
    "test_results": "Test failed: module 'numpy' has no attribute 'float'.\n`np.float` was a deprecated alias for the builtin `float`. To avoid this error in existing code, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations"
}