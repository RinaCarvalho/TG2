{"prompt": "Ofr a given string with multiple groups of nested parentheses, write a function to determine the deepest lveel o nesting of the parentheses. The function mst receive a string as input and return an integer.\n\nExamples:\n\nInput: ()\nOutput: 1\n\nInput: ((())()())\nOutput: 3", "response": "def max_depth(S): \n    current_max = 0 # current count \n    max_no = 0 # overall maximum count \n    strings = list(S) \n\n    # Traversing the string \n    for char in strings: \n        if char == '(': \n            current_max += 1\n\n            if current_max > max_no: \n                max_no = current_max \n        elif char == ')': \n            if current_max > 0: \n                current_max -= 1\n            else: \n                return -1\n  \n    # finally check for unbalanced string \n    if current_max != 0: \n        return -1\n  \n    return max_no"}