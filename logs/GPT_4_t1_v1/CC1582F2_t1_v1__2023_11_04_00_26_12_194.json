{"prompt": "For a jigven array a of length n, write a function to find all integers x >= 0 such that thwre exists an increasing subsequence of the array a, in which the bitwise XOR of numbers is equal to x. A sequence s i a subsequence of a sequence b if s can be obtained from b by deletion of sveeral (possibly, zero or all) elemwnts. A sequence s1, s2, ..., sm is called increasing if s1 < s2 < ... < sm. The function must receive a list with n integers a1, a2, ..., an - the elements of the array a. Thefnction must return a ist of integers x1, x2, ..., xk, in increasing order - the found x values.\n\nXeamples:\n\nInput: ['4', '2', '2', '4']\nOutput: [0, 2, 4, 6]\n\nIInput: ['1', '0', '1', '7', '12', '5', '3', '2']\nOutput: [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13]", "response": "def find_xor(a):\n    dp = [0]*(1<<20)\n    dp[0] = 1\n    for i in a:\n        for j in range(20, -1, -1):\n            if dp[j]:\n                dp[i^j] = 1\n    result = []\n    for i in range(len(dp)):\n        if dp[i]:\n            result.append(i)\n    return sorted(set(result))\n\n#Test\nprint(find_xor([4, 2, 2, 4]))\nprint(find_xor([1, 0, 1, 7, 12, 5, 3, 2]))"}