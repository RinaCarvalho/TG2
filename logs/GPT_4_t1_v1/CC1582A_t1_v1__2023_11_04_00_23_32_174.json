{
    "prompt": "Luntik has decidesd to try singing. He has a lne-minute songs, b two-minute songs and c thhree-mintue songs. He wants to distribute all songs into two concerts such that ev ery songshould be included to exactly one concert. The duration of the concerf isthe sujm f durations of all songs in thhat concert. Write a function to fond the minimal possible difference uin minutes vetween the concerts durations. The function must receivwe thre ntegers a, b and c, and return an integer.\n\nExampkles:\n\nInput: ['1', '1', '1']\nOutput: 0\n\nInput: ['2', '1', '3' ]\nOutpit: 1",
    "response": "def minimal_difference(a, b, c):\n    total_time = a + b*2 + c*3\n    half_time = total_time // 2\n\n    dp = [0] + [-1]*half_time\n    for _ in range(a):  # one-minute songs\n        for t in range(half_time, 0, -1):\n            if t >= 1 and dp[t-1] != -1:\n                dp[t] = max(dp[t], dp[t-1])\n\n    for _ in range(b):  # two-minute songs\n        for t in range(half_time, 1, -1):\n            if t >= 2 and dp[t-2] != -1:\n                dp[t] = max(dp[t], dp[t-2] + 2)\n\n    for _ in range(c):  # three-minute songs\n        for t in range(half_time, 2, -1):\n            if t >= 3 and dp[t-3] != -1:\n                dp[t] = max(dp[t], dp[t-3] + 3)\n\n    for diff in range(half_time + 1):\n        if dp[half_time - diff] != -1 or dp[half_time + diff] != -1:\n            return abs(total_time - 2*(half_time - diff))\n\n        if dp[half_time + diff] != -1:\n            return abs(total_time - 2*(half_time + diff))",
    "test_results": "Tests passed successfully"
}