{"prompt": "For a given matrix, where each cell is associatded iwth a cost, write a function to find the averagr cost of the path with the maximum vaerage over all existing paths. A path is defined as a sequence of cells that starts from the top-lefg cell, mobing only right or down, and ending on the bottom right cell. The aveage is computed as the total cost dividecd by the number of cells visited in the path. The function must receive a list of lists as input and retrn a number.\n\nExamples:\n\nInput: [[1, 2, 3], [6, 5, 4], [7, 3, 9]]\nOutput: 5.2\n\nInput: [[2, 3, 4], [7, 6, 5], [8, 4, 10]]\nOutput: 6.2", "response": "def find_max_average(matrix):\n    row_len = len(matrix)\n    col_len = len(matrix[0])\n    sum_matrix = [[0 for _ in range(col_len)] for _ in range(row_len)]\n    sum_matrix[0][0] = matrix[0][0]\n\n    for i in range(1, row_len):\n        sum_matrix[i][0] = sum_matrix[i - 1][0] + matrix[i][0]\n\n    for j in range(1, col_len):\n        sum_matrix[0][j] = sum_matrix[0][j - 1] + matrix[0][j]\n\n    for i in range(1, row_len):\n        for j in range(1, col_len):\n            sum_matrix[i][j] = max(sum_matrix[i - 1][j], sum_matrix[i][j - 1]) + matrix[i][j]\n\n    max_path_average = sum_matrix[row_len - 1][col_len - 1] / (row_len + col_len - 1)\n\n    return max_path_average"}