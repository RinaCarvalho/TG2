{"prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.", "response": "\ndef max_avg_path(matrix):\n    \"\"\"\n    Finds the average cost of the path with the maximum average over all existing paths.\n\n    Args:\n        matrix (list of lists): A matrix of costs, where each cell is associated with a cost.\n\n    Returns:\n        float: The average cost of the path with the maximum average.\n    \"\"\"\n\n    # Initialize the memoization table.\n    memo = {}\n\n    # Recursively compute the average cost of the path with the maximum average.\n    def max_avg_path_helper(i, j):\n        if (i, j) in memo:\n            return memo[(i, j)]\n\n        # Base case: We have reached the bottom-right cell.\n        if i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            return matrix[i][j]\n\n        # Recursive case: Compute the average cost of the path with the maximum average.\n        down_cost = max_avg_path_helper(i + 1, j)\n        right_cost = max_avg_path_helper(i, j + 1)\n        avg_cost = (matrix[i][j] + max(down_cost, right_cost)) / 2\n\n        # Store the average cost in the memoization table.\n        memo[(i, j)] = avg_cost\n\n        return avg_cost\n\n    # Compute the average cost of the path with the maximum average.\n    avg_cost = max_avg_path_helper(0, 0)\n\n    return avg_cost\n"}