{"prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.", "response": "\ndef max_avg_path(matrix):\n    # Initialize the dp table with the cost of the top-left cell\n    dp = [[matrix[0][0]]]\n\n    # Fill the first row of the dp table\n    for j in range(1, len(matrix[0])):\n        dp[0].append(dp[0][j-1] + matrix[0][j])\n\n    # Fill the first column of the dp table\n    for i in range(1, len(matrix)):\n        dp.append([dp[i-1][0] + matrix[i][0]])\n\n    # Fill the rest of the dp table\n    for i in range(1, len(matrix)):\n        for j in range(1, len(matrix[0])):\n            dp[i].append(max(dp[i-1][j], dp[i][j-1]) + matrix[i][j])\n\n    # Backtrack to find the path with the maximum average\n    i = len(matrix) - 1\n    j = len(matrix[0]) - 1\n    path = [(i, j)]\n    while i > 0 or j > 0:\n        if i > 0 and dp[i-1][j] >= dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n        path.append((i, j))\n\n    # Compute the average cost of the path\n    avg_cost = dp[-1][-1] / len(path)\n\n    return avg_cost, path\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\navg_cost, path = max_avg_path(matrix)\nprint(\"Average cost:\", avg_cost)\nprint(\"Path:\", path)\n"}