{"prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.", "response": "\ndef max_average_path(matrix):\n    # Initialize the memoization table\n    memo = {}\n\n    # Define a recursive function to calculate the maximum average path\n    def max_average_path_helper(i, j):\n        # Check if the subproblem has already been solved\n        if (i, j) in memo:\n            return memo[(i, j)]\n\n        # Base case: if we have reached the bottom-right cell\n        if i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            return matrix[i][j]\n\n        # Calculate the maximum average path from the current cell\n        max_avg = -float('inf')\n        if i + 1 < len(matrix):\n            max_avg = max(max_avg, (matrix[i][j] + max_average_path_helper(i + 1, j)) / 2)\n        if j + 1 < len(matrix[0]):\n            max_avg = max(max_avg, (matrix[i][j] + max_average_path_helper(i, j + 1)) / 2)\n\n        # Store the result in the memoization table\n        memo[(i, j)] = max_avg\n\n        return max_avg\n\n    # Call the recursive function to calculate the maximum average path\n    return max_average_path_helper(0, 0)\n\n# Test the function\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(max_average_path(matrix))  # Output: 5.0\n"}