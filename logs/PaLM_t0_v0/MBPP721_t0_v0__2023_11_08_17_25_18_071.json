{"prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.", "response": "\ndef max_average_path(matrix):\n    \"\"\"\n    Finds the average cost of the path with the maximum average over all existing paths.\n\n    Args:\n        matrix (list of lists): A matrix of costs, where each cell is associated with a cost.\n\n    Returns:\n        float: The average cost of the path with the maximum average.\n    \"\"\"\n\n    # Initialize the memoization table.\n    memo = {}\n\n    # Find the average cost of the path with the maximum average.\n    max_avg = _max_average_path(matrix, 0, 0, memo)\n\n    return max_avg\n\n\ndef _max_average_path(matrix, i, j, memo):\n    \"\"\"\n    Finds the average cost of the path with the maximum average from the cell (i, j).\n\n    Args:\n        matrix (list of lists): A matrix of costs, where each cell is associated with a cost.\n        i (int): The row index of the cell.\n        j (int): The column index of the cell.\n        memo (dict): A memoization table.\n\n    Returns:\n        float: The average cost of the path with the maximum average.\n    \"\"\"\n\n    # Check if the cell is out of bounds.\n    if i >= len(matrix) or j >= len(matrix[0]):\n        return 0\n\n    # Check if the average cost of the path from the cell has already been computed.\n    if (i, j) in memo:\n        return memo[(i, j)]\n\n    # Compute the average cost of the path from the cell.\n    avg = matrix[i][j] / 2\n    avg += max(_max_average_path(matrix, i + 1, j, memo), _max_average_path(matrix, i, j + 1, memo))\n\n    # Store the average cost of the path from the cell in the memoization table.\n    memo[(i, j)] = avg\n\n    return avg\n"}