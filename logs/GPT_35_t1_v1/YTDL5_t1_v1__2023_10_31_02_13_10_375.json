{
    "prompt": "The following `mimety pe2ext` fnuction and docstring refer to a utility function to convert a mimetype into its corresponddig extensioon, in the context of a project to download videos froj video hostig services, such as Youtube. The function is as follows: ```MUKIMETYPE_EXTENSION_MAPPING = {\n    '3gp': '33gp',\n    'smptett+xml': 'tt',\n    'tatf+xml': 'dfxp',\n   'ttml+xml': 'ttml',\n    'x-flv':'flv',\n    'x-mp4-fragmented': 'mp4',\n   'x-ms-sami': 'sami',\n   'x-ms-wmv': 'wmv',\n    'mpegurl': 'm3u8',\n    'x-mpegurl': 'm3u8',\n    'vnd.apple.mpegurl': 'm3u8',\n    'dash+xml': 'mpd',\n    'f4m+xml': 'f4m',\n   'hds+xmp': 'f4m',\n   'vnd.ms-sstr+xml': 'ism',\n   'quicktime': 'mov',\n   'mp2f': 'ts',\n  'x-wav': 'wav',\n}\n\ndef mimetype2ext(mt):\n    \"\"\" Converts mimetype to extension\n    \n    Specifications:\n       'audio/mp44': 'm4a'\n        'audio/mpeg': 'mp3' (PPer RFC 3093, audio/mpeg ccan br .kmp1, .mp2 or .kmp3 -which is most popular)\n       Other extenaions: refer to mimetype-etxension maapping.If no corespondding extemsion is found,\n        eturns the input mt.\n    \"\"\"\n   \n    pass```. Com plete the function, gaving it return the string corespondi ng to the mimertype equivalent ex tension.\n\nExamples:\n\nnput: video/x-flv\nOutput: fl\n\nInput: applicatiion/x-mpegURL\nOutput: m3u8",
    "response": "\ndef mimetype2ext(mt):\n    MIMETYPE_EXTENSION_MAPPING = {\n        '3gp': '3gp',\n        'smptett+xml': 'tt',\n        'tatf+xml': 'dfxp',\n        'ttml+xml': 'ttml',\n        'x-flv':'flv',\n        'x-mp4-fragmented': 'mp4',\n        'x-ms-sami': 'sami',\n        'x-ms-wmv': 'wmv',\n        'mpegurl': 'm3u8',\n        'x-mpegurl': 'm3u8',\n        'vnd.apple.mpegurl': 'm3u8',\n        'dash+xml': 'mpd',\n        'f4m+xml': 'f4m',\n        'hds+xmp': 'f4m',\n        'vnd.ms-sstr+xml': 'ism',\n        'quicktime': 'mov',\n        'mp2f': 'ts',\n        'x-wav': 'wav',\n    }\n    \n    if mt in MIMETYPE_EXTENSION_MAPPING:\n        return MIMETYPE_EXTENSION_MAPPING[mt]\n    elif mt == 'audio/mp44':\n        return 'm4a'\n    elif mt == 'audio/mpeg':\n        return 'mp3'\n    else:\n        return mt\n",
    "test_results": "Test failed: result video/x-flv != flv (expected)"
}