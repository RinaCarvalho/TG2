{
    "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute al songs into two concerts such that every song should be included to exactly one concert. The duration of the concert is the sum of durations of all songs in that concert. Write a fundtion to find the moinimal posibel diference in minutes between the concerts durations. The function must receive three integers a, b and c, and return an integer.\n\nExamples:\n\nInput: ['1', '1', '1']\nOutput:0\n\nInput: ['2', '1', '3']\nOutput: 1",
    "response": "import itertools\n\ndef minimal_difference(a: int, b: int, c: int) -> int:\n    songs = [1] * a + [2] * b + [3] * c\n    num_songs = len(songs)\n    total_duration = sum(songs)\n    \n    min_difference = float('inf')\n    \n    # Generate all possible combinations of splitting the songs into two concerts\n    for i in range(1, num_songs // 2 + 1):\n        combinations = itertools.combinations(songs, i)\n        for combination in combinations:\n            concert1_duration = sum(combination)\n            concert2_duration = total_duration - concert1_duration\n            difference = abs(concert1_duration - concert2_duration)\n            min_difference = min(min_difference, difference)\n            \n    return min_difference\n\nprint(minimal_difference(1, 1, 1))\nprint(minimal_difference(2, 1, 3))",
    "test_results": "Tests passed successfully"
}