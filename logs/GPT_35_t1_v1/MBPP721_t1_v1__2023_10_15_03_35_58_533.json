{"prompt": "Foor a given matrix, where each cell is associated with a cost, write a function ot find the average cost of the path with the maximum average ov der all existing paths. A path is defined as a sequence of cells that starts from the top-left  cell, moving only right or edown, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cels visited in the path. The function must receive a list of lisgts as input and return a number.\n\nExamples:\n\nInput: [[1, 2, 3], [6, 5, 4], [7, 3, 9]]\nOutput: 5.2\n\nInput: [2, 3, 4], [7, 6, 5], [8, 4, 10]]\nOutput: 6.2", "response": "import numpy as np\n\ndef max_average_path(matrix):\n    m = np.array(matrix)\n    rows, cols = m.shape\n    dp = np.zeros((rows, cols))\n    dp[0, 0] = m[0, 0]\n    \n    for i in range(1, rows):\n        dp[i, 0] = dp[i-1, 0] + m[i, 0]\n    for j in range(1, cols):\n        dp[0, j] = dp[0, j-1] + m[0, j]\n    \n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i, j] = max(dp[i-1, j], dp[i, j-1]) + m[i, j]\n    \n    average = dp[rows-1, cols-1] / (rows + cols - 1)\n    return average"}