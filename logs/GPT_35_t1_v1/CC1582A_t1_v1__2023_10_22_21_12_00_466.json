{
    "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute al songs into two concerts such that every song should be included to exactly one concert. The duration of the concert is the sum of durations of all songs in that concert. Write a fundtion to find the moinimal posibel diference in minutes between the concerts durations. The function must receive three integers a, b and c, and return an integer.\n\nExamples:\n\nInput: ['1', '1', '1']\nOutput:0\n\nInput: ['2', '1', '3']\nOutput: 1",
    "response": "def minimal_difference(a, b, c):\n    total_duration = a*1 + b*2 + c*3\n    target_duration = total_duration // 2\n    \n    def subset_sum(nums, target):\n        dp = [False] * (target + 1)\n        dp[0] = True\n        \n        for num in nums:\n            for i in range(target, num - 1, -1):\n                dp[i] |= dp[i - num]\n        \n        return dp\n\n    possible_durations = subset_sum([1, 2, 3], target_duration)\n    \n    min_diff = float('inf')\n    for i in range(target_duration, -1, -1):\n        if possible_durations[i]:\n            min_diff = min(min_diff, total_duration - 2*i)\n            break\n    \n    return min_diff\n\nprint(minimal_difference(1, 1, 1))\nprint(minimal_difference(2, 1, 3))",
    "test_results": "Test failed: result 18 != 0 (expected)"
}