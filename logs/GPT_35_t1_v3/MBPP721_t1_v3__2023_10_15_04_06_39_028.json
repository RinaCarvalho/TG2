{
    "prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.\n\nExamples:\n\nInput: ['[1, 2, 3]', '[6, 5, 4]', '[7, 3, 9]']\nOutput: 5.2\n\nInput: ['[2, 3, 4]', '[7, 6, 5]', '[8, 4, 10]']\nOutput: 6.2",
    "response": "import numpy as np\n\ndef average_cost(matrix):\n    # Convert the matrix to a numpy array\n    matrix = np.array(matrix)\n    \n    # Get the number of rows and columns in the matrix\n    rows, cols = matrix.shape\n    \n    # Create a new matrix to store the cumulative costs\n    cumulative_matrix = np.zeros_like(matrix)\n    \n    # Fill the first row and column of the cumulative matrix\n    cumulative_matrix[0, 0] = matrix[0, 0]\n    for i in range(1, cols):\n        cumulative_matrix[0, i] = cumulative_matrix[0, i-1] + matrix[0, i]\n    for i in range(1, rows):\n        cumulative_matrix[i, 0] = cumulative_matrix[i-1, 0] + matrix[i, 0]\n    \n    # Calculate the cumulative costs for the remaining cells\n    for i in range(1, rows):\n        for j in range(1, cols):\n            cumulative_matrix[i, j] = matrix[i, j] + max(cumulative_matrix[i-1, j], cumulative_matrix[i, j-1])\n    \n    # Calculate the average cost of the maximum average path\n    average_cost = cumulative_matrix[rows-1, cols-1] / (rows + cols - 1)\n    \n    return average_cost",
    "test_results": "Tests passed successfully"
}