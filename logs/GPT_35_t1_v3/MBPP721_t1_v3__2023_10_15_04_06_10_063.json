{
    "prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.\n\nExamples:\n\nInput: ['[1, 2, 3]', '[6, 5, 4]', '[7, 3, 9]']\nOutput: 5.2\n\nInput: ['[2, 3, 4]', '[7, 6, 5]', '[8, 4, 10]']\nOutput: 6.2",
    "response": "def max_average_path(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    average_costs = [[0] * cols for _ in range(rows)]\n    average_costs[0][0] = matrix[0][0]\n\n    # Calculate average cost of paths visiting cells only from the top row\n    for col in range(1, cols):\n        average_costs[0][col] = (average_costs[0][col - 1] * col + matrix[0][col]) / (col + 1)\n\n    # Calculate average cost of paths visiting cells only from the left column\n    for row in range(1, rows):\n        average_costs[row][0] = (average_costs[row - 1][0] * row + matrix[row][0]) / (row + 1)\n\n    # Calculate average cost of paths visiting cells from both previous row and previous column\n    for row in range(1, rows):\n        for col in range(1, cols):\n            average_costs[row][col] = max((average_costs[row - 1][col] * (row + 1) + matrix[row][col]) / (row + 2),\n                                          (average_costs[row][col - 1] * (col + 1) + matrix[row][col]) / (col + 2))\n\n    return average_costs[-1][-1]",
    "test_results": "Test failed: result 5.333333333333334 != 5.2 (expected)"
}