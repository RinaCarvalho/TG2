{
    "prompt": "Let c_1, c_2, \u2026, c_n be a permutation of integers 1, 2, \u2026, n. Consider all subsegments of this permutation containing an integer x. Given an integer m, we call the integer x good if there are exactly m different values of maximum on these subsegments. A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array). A sequence a is a subsegment of a sequence b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. Given four integers n, m, k and p, write a function to count the number of permutations of length n with exactly k good numbers, modulo p. The function must receive four integers n, m, k and p and return an integer.\n\nExamples:\n\nInput: 4 3 2 10007\nOutput: 4\n\nInput: 6 4 1 769626776\nOutput: 472\n\nInput: 66 11 9 786747482\nOutput: 206331312\n\nInput: 99 30 18 650457567\nOutput: 77365367",
    "response": "def count_permutations(n, m, k, p):\n    def binomial_coefficient(n, m):\n        if m == 0 or m == n:\n            return 1\n        if m > n - m:\n            m = n - m\n        c = 1\n        for i in range(m):\n            c *= n - i\n            c //= i + 1\n        return c\n\n    def count_good_numbers(n, m, k):\n        c = 0\n        for r in range(1, m + 1):\n            c += binomial_coefficient(n - 1, r - 1) * binomial_coefficient(n - r, m - r)\n        return c\n\n    return count_good_numbers(n, m, k) % p",
    "test_results": "Test failed: result 12 != 4 (expected)"
}