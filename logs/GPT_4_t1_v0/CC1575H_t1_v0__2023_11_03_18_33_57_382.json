{"prompt": "The Winter holiday will be here soon. Mr. Chanek wants to decorate his house's wall with ornaments. The wall can be represented as a binary string a of length n. His favorite nephew has another binary string b of length m (m \u2264 n).\n\nMr. Chanek's nephew loves the non-negative integer k. His nephew wants exactly k occurrences of b as substrings in a. \n\nHowever, Mr. Chanek does not know the value of k. So, for each k (0 \u2264 k \u2264 n - m + 1), find the minimum number of elements in a that have to be changed such that there are exactly k occurrences of b in a.\n\nA string s occurs exactly k times in t if there are exactly k different pairs (p,q) such that we can obtain s by deleting p characters from the beginning and q characters from the end of t. Write a function to determine the minimum number of elements needed to be changed for each k. The function must receive two integers n and m, and two binary strings a and b, of lengths n and m. The function must return a list with (n - m + 2) integers, where the (k+1)-th integer denotes the minimal number of elements in a that must be changed so there are exactly k occurrences of b as substrings in a. If no amount of changes is capable of satisfying k occurrences, the (k+1)-th integer must be -1.\n\nExamples:\n\nInput: ['9', '3', '100101011', '101']\nOutput: [1, 1, 0, 1, 6, -1, -1, -1]\n\nInput: ['9', '3', '101101011', '111']\nOutput: [0, 2, 1, 3, 2, 2, 4, 3]", "response": "def decorate(n, m, a, b):\n    res = [-1]*(n-m+2)\n    for k in range(n-m+1, -1, -1):  # go backwards\n        if k == 0:\n            change = sum([a[i] != '0' for i in range(n)])\n            res[k] = change\n        else:\n            occurs = [1 if a[i:i+m] == b else 0 for i in range(n-m+1)]\n            if sum(occurs) < k: break\n            dp = [[0]*(k+1) for _ in range(len(occurs)+1)]\n            dp[0][0] = sum([a[i] != '0' for i in range(n)])\n            for i in range(1, len(occurs)+1):\n                dp[i][0] = dp[i-1][0] - (a[i-1] != '0')\n                for j in range(1, min(i+1, k+1)):\n                    change = sum([a[i+t] != b[t] for t in range(m)])\n                    dp[i][j] = min(dp[i-1][j] - (a[i-1] != '0'), dp[i-m][j-1] + change)\n            res[k] = min(dp[i][k] for i in range(k, len(occurs)+1))\n    return res[0:(n-m+2)]\n\ndecorate(int('9'), int('3'), '100101011', '101')\ndecorate(int('9'), int('3'), '101101011', '111')"}