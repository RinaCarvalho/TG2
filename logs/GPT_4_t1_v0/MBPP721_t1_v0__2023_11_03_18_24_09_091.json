{
    "prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.\n\nExamples:\n\nInput: [[1, 2, 3], [6, 5, 4], [7, 3, 9]]\nOutput: 5.2\n\nInput: [[2, 3, 4], [7, 6, 5], [8, 4, 10]]\nOutput: 6.2",
    "response": "def max_average_path(matrix):\n    # Dimensions of the matrix\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    # Maximum value matrix initialization\n    max_matrix = [[0.0 for _ in range(cols)] for _ in range(rows)]\n\n    # Base Case\n    sum = matrix[0][0]\n    count = 1\n    \n    # Filling up the 0th row\n    for c in range(1, cols):\n        sum += matrix[0][c]\n        count += 1\n        max_matrix[0][c] = sum / count\n    \n    sum = matrix[0][0]\n    count = 1\n    \n    # Filling up the 0th column\n    for r in range(1, rows):\n        sum += matrix[r][0]\n        count += 1\n        max_matrix[r][0] = sum / count\n\n    # Filling up the remaining cells\n    for r in range(1, rows):\n        for c in range(1, cols):\n            total_sum = (max_matrix[r-1][c] * r) + (max_matrix[r][c-1] * c) + matrix[r][c]\n            total_count = r + c + 1\n            max_matrix[r][c] = total_sum / total_count\n    \n    return max_matrix[rows-1][cols-1]",
    "test_results": "Test failed: result 4.5 != 5.2 (expected)"
}