{"prompt": "Let c_1, c_2, \u2026, c_n be a permutation of integers 1, 2, \u2026, n. Consider all subsegments of this permutation containing an integer x. Given an integer m, we call the integer x good if there are exactly m different values of maximum on these subsegments. A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array). A sequence a is a subsegment of a sequence b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. Given four integers n, m, k and p, write a function to count the number of permutations of length n with exactly k good numbers, modulo p. The function must receive four integers n, m, k and p and return an integer.\n\nExamples:\n\nInput: ['4', '3', '2', '10007']\nOutput: 4\n\nInput: ['6', '4', '1', '769626776']\nOutput: 472\n\nInput: ['66', '11', '9', '786747482']\nOutput: 206331312\n\nInput: ['99', '30', '18', '650457567']\nOutput: 77365367", "response": "\ndef count_good_permutations(n, m, k, p):\n    factorial = [1]\n    for i in range(1, n + 1):\n        factorial.append((factorial[-1] * i) % p)\n\n    inverse_factorial = [0] * (n + 1)\n    inverse_factorial[n] = pow(factorial[n], p - 2, p)\n    for i in range(n - 1, -1, -1):\n        inverse_factorial[i] = (inverse_factorial[i + 1] * (i + 1)) % p\n\n    def C(n, k):\n        if k > n or k < 0:\n            return 0\n        return (factorial[n] * inverse_factorial[k] * inverse_factorial[n - k]) % p\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for t in range(i + 1):\n            dp[i + 1][t] = (dp[i + 1][t] + dp[i][t] * (i + 1 - t)) % p\n            if i + 1 >= m:\n                dp[i + 1][t + 1] = (dp[i + 1][t + 1] + dp[i][t] * (t + 1)) % p\n\n    answer = 0\n    for i in range(k, n + 1):\n        component = (C(n, i) * pow(m, i, p) * pow(n - m + 1, n - i, p)) % p\n        for t in range(i, n + 1):\n            answer = (answer + component * dp[t][i]) % p\n    return answer\n\n"}