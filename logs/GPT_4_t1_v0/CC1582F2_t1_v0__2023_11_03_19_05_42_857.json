{"prompt": "For a given array a of length n, write a function to find all integers x >= 0 such that there exists an increasing subsequence of the array a, in which the bitwise XOR of numbers is equal to x. A sequence s is a subsequence of a sequence b if s can be obtained from b by deletion of several (possibly, zero or all) elements. A sequence s1, s2, ..., sm is called increasing if s1 < s2 < ... < sm. The function must receive a list with n integers a1, a2, ..., an - the elements of the array a. The function must return a list of integers x1, x2, ..., xk, in increasing order - the found x values.\n\nExamples:\n\nInput: ['4', '2', '2', '4']\nOutput: [0, 2, 4, 6]\n\nInput: ['1', '0', '1', '7', '12', '5', '3', '2']\nOutput: [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13]", "response": "def increasing_subsequence_xor(array):\n    xor_values = set()\n    n = len(array)\n    \n    for size in range(1, n + 1):\n        subsequence_combinations = combinations(sorted(array), size)\n        \n        for subsequence in subsequence_combinations:\n            xor_result = 0\n            for number in subsequence:\n                xor_result ^= int(number)\n            \n            xor_values.add(xor_result)\n        \n    return sorted(list(xor_values))\n\nfrom itertools import combinations"}