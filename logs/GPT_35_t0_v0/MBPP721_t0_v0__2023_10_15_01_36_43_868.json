{
    "prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.",
    "response": "def find_max_avg_cost(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    # create a new matrix to store the cumulative costs\n    cumulative_costs = [[0] * cols for _ in range(rows)]\n\n    # initialize the first cell\n    cumulative_costs[0][0] = matrix[0][0]\n\n    # calculate the cumulative costs for the first row\n    for c in range(1, cols):\n        cumulative_costs[0][c] = cumulative_costs[0][c - 1] + matrix[0][c]\n\n    # calculate the cumulative costs for the first column\n    for r in range(1, rows):\n        cumulative_costs[r][0] = cumulative_costs[r - 1][0] + matrix[r][0]\n\n    # calculate the cumulative costs for the remaining cells\n    for r in range(1, rows):\n        for c in range(1, cols):\n            cumulative_costs[r][c] = matrix[r][c] + min(cumulative_costs[r - 1][c], cumulative_costs[r][c - 1])\n\n    # calculate the maximum average cost by dividing the total cost by the number of cells visited\n    max_avg_cost = cumulative_costs[rows - 1][cols - 1] / (rows + cols - 1)\n\n    return max_avg_cost",
    "test_results": "Test failed: result 3.8 != 5.2 (expected)"
}