{
    "prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.",
    "response": "def find_max_average(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    # Create a 2D matrix to store the cumulative sum of costs\n    cumulative_sum = [[0] * cols for _ in range(rows)]\n    \n    # Fill the first row\n    cumulative_sum[0][0] = matrix[0][0]\n    for col in range(1, cols):\n        cumulative_sum[0][col] = matrix[0][col] + cumulative_sum[0][col-1]\n        \n    # Fill the first column\n    for row in range(1, rows):\n        cumulative_sum[row][0] = matrix[row][0] + cumulative_sum[row-1][0]\n        \n    # Fill the rest of the matrix\n    for row in range(1, rows):\n        for col in range(1, cols):\n            cumulative_sum[row][col] = matrix[row][col] + max(cumulative_sum[row][col-1], cumulative_sum[row-1][col])\n    \n    # Compute the average cost of the path with maximum average\n    total_cost = cumulative_sum[rows-1][cols-1]\n    num_cells = rows + cols - 1\n    average_cost = total_cost / num_cells\n    \n    return average_cost",
    "test_results": "Tests passed successfully"
}