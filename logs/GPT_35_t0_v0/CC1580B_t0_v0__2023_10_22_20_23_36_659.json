{"prompt": "Let c_1, c_2, \u2026, c_n be a permutation of integers 1, 2, \u2026, n. Consider all subsegments of this permutation containing an integer x. Given an integer m, we call the integer x good if there are exactly m different values of maximum on these subsegments. A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array). A sequence a is a subsegment of a sequence b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. Given four integers n, m, k and p, write a function to count the number of permutations of length n with exactly k good numbers, modulo p. The function must receive four integers n, m, k and p and return an integer.", "response": "def count_permutations(n, m, k, p):\n    def dp(i, j):\n        if i == n + 1:\n            return int(j == m)\n        if j > m:\n            return 0\n        if c[i][j] != -1:\n            return c[i][j]\n        \n        res = 0\n        for x in range(1, n + 1):\n            if x in good[j]:\n                res += dp(i + 1, j + 1)\n            else:\n                res += dp(i + 1, j)\n            res %= p\n        \n        c[i][j] = res\n        return res\n\n    good = [[] for _ in range(m + 1)]\n    for _ in range(m):\n        a, b = map(int, input().split())\n        good[b].append(a)\n\n    c = [[-1] * (m + 1) for _ in range(n + 1)]\n    return dp(1, 0) % p"}