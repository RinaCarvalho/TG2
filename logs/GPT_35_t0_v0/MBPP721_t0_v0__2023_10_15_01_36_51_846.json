{"prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.", "response": "def find_max_avg(matrix):\n    n_rows = len(matrix)\n    n_cols = len(matrix[0])\n    \n    # Create a 2D array to store the maximum average cost for each cell\n    max_avg = [[0] * n_cols for _ in range(n_rows)]\n    \n    # Initialize the bottom-right cell with its own cost\n    max_avg[n_rows - 1][n_cols - 1] = matrix[n_rows - 1][n_cols - 1]\n    \n    # Calculate the maximum average cost for each cell, starting from the bottom-right cell and moving upwards and leftwards\n    for i in range(n_rows - 1, -1, -1):\n        for j in range(n_cols - 1, -1, -1):\n            if i == n_rows - 1 and j == n_cols - 1:\n                continue\n            down_avg = 0 if i == n_rows - 1 else max_avg[i + 1][j]\n            right_avg = 0 if j == n_cols - 1 else max_avg[i][j + 1]\n            max_avg[i][j] = matrix[i][j] + max(down_avg, right_avg)\n    \n    # Return the maximum average cost for the top-left cell\n    return max_avg[0][0] / (n_rows + n_cols - 1)"}