{
    "prompt": "For a given matrix, where each cell is associated with a cost, write a function to find the average cost of the path with the maximum average over all existing paths. A path is defined as a sequence of cells that starts from the top-left cell, moving only right or down, and ending on the bottom right cell. The average is computed as the total cost divided by the number of cells visited in the path. The function must receive a list of lists as input and return a number.",
    "response": "\ndef calculate_max_average(matrix):\n    m = len(matrix)\n    n = len(matrix[0])\n\n    # Create a 2D dp array to store the maximum average cost for each cell\n    dp = [[0] * n for _ in range(m)]\n\n    # Calculate the maximum average cost for the bottom-right cell\n    dp[m-1][n-1] = matrix[m-1][n-1]\n\n    # Calculate the maximum average cost for the last row (moving only right)\n    for j in range(n-2, -1, -1):\n        dp[m-1][j] = dp[m-1][j+1] + matrix[m-1][j]\n\n    # Calculate the maximum average cost for the last column (moving only down)\n    for i in range(m-2, -1, -1):\n        dp[i][n-1] = dp[i+1][n-1] + matrix[i][n-1]\n\n    # Calculate the maximum average cost for each cell in the matrix\n    for i in range(m-2, -1, -1):\n        for j in range(n-2, -1, -1):\n            dp[i][j] = max(dp[i+1][j], dp[i][j+1]) + matrix[i][j]\n\n    # Calculate the average cost of the path with the maximum average over all existing paths\n    return dp[0][0] / (m + n - 1)\n",
    "test_results": "Test failed: result 13.0 != 5.2 (expected)"
}